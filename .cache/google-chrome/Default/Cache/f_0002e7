<div id="title_page">
    <h1 class="title">Learn Enough Git to Be Dangerous</h1>
    <h1 class="subtitle">An introduction to version control with Git</h1>
    <h2 class="author">Michael Hartl</h2>
  </div>
      

<h1 class="contents">Contents</h1><div id="table_of_contents">
  <ul>
    <li class="section">
      <a href="git_fragment.html#sec-getting_started" class="heading hyperref"><span class="number">1 </span>Getting started</a>
    </li>
    <li>
      <ul>
        <li class="subsection">
          <a href="git_fragment.html#sec-installation_and_setup" class="heading hyperref"><span class="number">1.1 </span>Installation and setup</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-initializing_the_repo" class="heading hyperref"><span class="number">1.2 </span>Initializing the repo</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-our_first_commit" class="heading hyperref"><span class="number">1.3 </span>Our first commit</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-viewing_the_diff" class="heading hyperref"><span class="number">1.4 </span>Viewing the diff</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-adding_a_tag" class="heading hyperref"><span class="number">1.5 </span>Adding an HTML tag</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-adding_html_structure" class="heading hyperref"><span class="number">1.6 </span>Adding HTML structure</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-summary_getting_started" class="heading hyperref"><span class="number">1.7 </span>Summary</a>
        </li>
      </ul>
    </li>
    <li class="section">
      <a href="git_fragment.html#sec-sharing" class="heading hyperref"><span class="number">2 </span>Backing up and sharing</a>
    </li>
    <li>
      <ul>
        <li class="subsection">
          <a href="git_fragment.html#sec-github" class="heading hyperref"><span class="number">2.1 </span>Signing up for GitHub</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-remote_repo" class="heading hyperref"><span class="number">2.2 </span>Remote repo</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-adding_a_readme" class="heading hyperref"><span class="number">2.3 </span>Adding a README</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-summary_sharing" class="heading hyperref"><span class="number">2.4 </span>Summary</a>
        </li>
      </ul>
    </li>
    <li class="section">
      <a href="git_fragment.html#sec-intermediate_workflow" class="heading hyperref"><span class="number">3 </span>Intermediate workflow</a>
    </li>
    <li>
      <ul>
        <li class="subsection">
          <a href="git_fragment.html#sec-commit_push_repeat" class="heading hyperref"><span class="number">3.1 </span>Commit, push, repeat</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-ignoring_files" class="heading hyperref"><span class="number">3.2 </span>Ignoring files</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-branching_and_merging" class="heading hyperref"><span class="number">3.3 </span>Branching and merging</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-recovering_from_errors" class="heading hyperref"><span class="number">3.4 </span>Recovering from errors</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-summary_intermediate_workflow" class="heading hyperref"><span class="number">3.5 </span>Summary</a>
        </li>
      </ul>
    </li>
    <li class="section">
      <a href="git_fragment.html#sec-collaborating" class="heading hyperref"><span class="number">4 </span>Collaborating</a>
    </li>
    <li>
      <ul>
        <li class="subsection">
          <a href="git_fragment.html#sec-clone_push_pull" class="heading hyperref"><span class="number">4.1 </span>Clone, push, pull</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-merge_conflicts" class="heading hyperref"><span class="number">4.2 </span>Pulling and merge conflicts</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-pushing_branches" class="heading hyperref"><span class="number">4.3 </span>Pushing branches</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-a_surprise_bonus" class="heading hyperref"><span class="number">4.4 </span>A surprise bonus</a>
        </li>
        <li class="subsection">
          <a href="git_fragment.html#sec-summary_collaborating" class="heading hyperref"><span class="number">4.5 </span>Summary</a>
        </li>
      </ul>
    </li>
    <li class="section">
      <a href="git_fragment.html#sec-conclusion" class="heading hyperref"><span class="number">5 </span>Conclusion</a>
    </li>
  </ul>
</div><p><em>Learn Enough™ Git to Be Dangerous</em> is the final installment in a trilogy of tutorials on <em>developer fundamentals</em> designed to teach three skills essential for software developers and those who work with them.<span class="intersentencespace"></span> The first two cover the <a href="http://learnenough.com/command-line-tutorial" target="_blank">Unix command line</a> and <a href="http://learnenough.com/text-editor-tutorial" target="_blank">text editors</a>; this one adds a third: <em>version control</em>.<span class="intersentencespace"></span> As with the first two tutorials, <em>Learn Enough™ Git to Be Dangerous</em> doesn’t even assume you’re familiar with the <em>category</em> of application, so if you’re unsure about what “version control” is, you’re in the right place.<span class="intersentencespace"></span> Even if you are already familiar with the subject, it’s likely you’ll still learn a lot from this tutorial.<span class="intersentencespace"></span> Either way, learning this important technology prepares you for the other <a href="http://learnenough.com/" target="_blank">Learn Enough™ tutorials</a> while enabling an astonishing variety of applications—including a special surprise bonus at the end of this tutorial (<a href="#aside-shipping" class="hyperref">Box <span class="ref">1</span></a>).</p>
<p><em>Note</em>: <em>Learn Enough™ Git to Be Dangerous</em> is available for free online, but ebooks (EPUB, MOBI, PDF) are <a href="https://www.softcover.io/buy/28fdb94f/learn_enough_git" target="_blank">available for purchase</a> as well.</p>
<div class="aside" id="aside-shipping" data-tralics-id="uid1" data-number="1"><div class="heading"><span class="number">Box 1.</span> 

<span class="description">Real artists ship</span></div>
<p>As legendary Apple cofounder Steve Jobs once said: <em>Real artists ship.</em><span class="intersentencespace"></span> What he meant was that, as tempting as it is to privately polish in perpetuity, makers must <em>ship</em> their work—that is, actually finish it and get it out into the world.<span class="intersentencespace"></span> This can be scary, because shipping means exposing your work not only to fans but also to critics.<span class="intersentencespace"></span> “What if people don’t like what I’ve made?”<span class="intersentencespace"></span> <em>Real artists ship.</em></p>
<p>It’s important to understand that shipping is a separate skill from making.<span class="intersentencespace"></span> Many makers get good at making things but never learn to ship.<span class="intersentencespace"></span> To keep this from happening to us, starting in <em>Learn Enough™ Git to Be Dangerous</em> we’re going to ship at least one thing in every Learn Enough™ tutorial.<span class="intersentencespace"></span> In fact, in this tutorial we’ll actually ship <em>two</em> things—a public Git repository and a surprise bonus that will give you bragging rights with all of your friends.</p>

</div><p><a href="https://en.wikipedia.org/wiki/Version_control" target="_blank">Version control</a> solves a problem that might look familiar if you’ve ever seen Word documents or Excel spreadsheets with names like <code>Report_2014_1.doc</code>, <code>Report_2014_2.doc</code>, <code>Report_2014_3.doc</code>, or <code>annual-budget-v17.xls</code>.<span class="intersentencespace"></span> These cumbersome names indicate how annoying it can be to track different versions of documents.<span class="intersentencespace"></span> Nowadays, applications like Word do sometimes offer built-in version tracking, but such features are tightly coupled to the underlying application and aren’t useful for any other document types.<span class="intersentencespace"></span> Many technical applications (including most websites and programming projects) require a general solution to the problem of versions.</p>
<p>A version control system (or <em>VCS</em>) provides an automatic way to track changes in software projects, giving creators the power to view previous versions of files and directories, develop speculative features without disrupting the main development, securely back up the project and its history, and collaborate easily and conveniently with others.<span class="intersentencespace"></span> In addition, using version control also makes deploying production websites and web applications much easier.<span class="intersentencespace"></span> As a result, fluency in at least one version control system is an essential component of <em>technical sophistication</em> (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>).<span class="intersentencespace"></span> This applies especially to the version control system covered in this tutorial, called <em>Git</em>.</p>
<div class="aside" id="aside-technical_sophistication" data-tralics-id="uid2" data-number="2"><div class="heading"><span class="number">Box 2.</span> 

<span class="description">Technical sophistication</span></div>
<p>A principal theme of the <a href="http://learnenough.com" target="_blank">Learn Enough™ tutorials</a> is the development of <em>technical sophistication</em>, the combination of hard and soft skills that make it seem like you can magically solve any technical problem (<a href="#fig-tech_support_cheat_sheet" class="hyperref">Figure <span class="ref">1</span></a>).<sup id="cha-0_footnote-ref-1" class="footnote"><a href="#cha-0_footnote-1">1</a></sup><span class="intersentencespace"></span> <em>Learn Enough™ Git to Be Dangerous</em> is important for developing these skills because being able to use at least one modern version control system is an essential component of technical sophistication.</p>
<p>In the context of Git, technical sophistication includes several things.<span class="intersentencespace"></span> Many Git commands print various details to the terminal screen; technical sophistication lets you figure out which ones to pay attention to and which to ignore.<span class="intersentencespace"></span> There are also many Git-related resources on the web, which among other things means that Google searches are often useful for figuring out the exact command you need at a particular time.<span class="intersentencespace"></span> Technical sophistication lets you figure out the best search terms for finding the answer you’re looking for; e.g., if you need to delete a remote branch (<a href="git_fragment.html#sec-exercises_pushing_branches" class="hyperref">Section <span class="ref">4.3.1</span></a>), Googling for “git delete remote branch” is a good bet to turn up something useful.<span class="intersentencespace"></span> Finally, repository hosting sites like <a href="http://github.com/" target="_blank">GitHub</a> and <a href="http://bitbucket.org/" target="_blank">Bitbucket</a> typically include commands to help guide you through various setup tasks, and technical sophistication gives you the confidence to follow the steps even if you don’t understand every detail.</p>
<p>One helpful command for learning Git is <code>git help</code>, which by itself gives general guidelines on Git usage, and when applied to a specific command gives further information on that command.<span class="intersentencespace"></span> For example, <code>git help add</code> shows details about the <code>git add</code> command.<span class="intersentencespace"></span> The output of <code>git help</code> is similar to the man pages <a href="https://www.learnenough.com/command-line-tutorial#sec-man_pages" target="_blank">covered</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>: full of useful but often obscure information.<span class="intersentencespace"></span> As always, use your technical sophistication to help make sense of it.</p>

</div><div class="center figure" id="fig-tech_support_cheat_sheet" data-tralics-id="uid4" data-number="1">
<div class="graphics image"><img src="images/figures/tech_support_cheat_sheet.png" alt="images/figures/tech_support_cheat_sheet"></div><div class="caption"><span class="header">Figure 1: </span><span class="description">“<a href="https://m.xkcd.com/627/" target="_blank">Tech Support Cheat Sheet</a>” (via <a href="http://xkcd.com/" target="_blank">xkcd</a>).
</span></div></div>
<p>Version control has evolved considerably over the years.<span class="intersentencespace"></span> The family line leading to Git includes programs called RCS, CVS, and Subversion, and there are many current alternatives as well, including Perforce, Bazaar, and Mercurial.<span class="intersentencespace"></span> I mention these examples not because you need to know what they are, but only to show what a bewildering variety there is.<span class="intersentencespace"></span> What’s worse, when you choose a version control system, you really <em>commit</em> to it,<sup id="cha-0_footnote-ref-2" class="footnote"><a href="#cha-0_footnote-2">2</a></sup> and it is often difficult to switch from one to another.<span class="intersentencespace"></span> Happily, in the last few years an undisputed winner has emerged in the open-source VCS wars: Git.<span class="intersentencespace"></span> This victory is the main reason this tutorial is called <em>Learn Enough™ Git to Be Dangerous</em> rather than <em>Learn Enough™ Version Control to Be Dangerous</em>.<span class="intersentencespace"></span> Nevertheless, many of the ideas here are quite general, and if by some chance you need to use a different VCS, this tutorial will still provide a useful introduction to the subject.</p>
<p>Originally developed by <a href="https://en.wikipedia.org/wiki/Linux" target="_blank">Linux</a> creator Linus Torvalds<sup id="cha-0_footnote-ref-3" class="footnote"><a href="#cha-0_footnote-3">3</a></sup> to host the Linux <a href="https://en.wikipedia.org/wiki/Kernel_(operating_system)" target="_blank">kernel</a>, Git has a combination of power, speed, and community adoption that leave it few rivals.<span class="intersentencespace"></span> It can be tricky to learn, though, and other Git tutorials have a tendency to introduce lots of heavy theory, which can be interesting to learn but in practice is really only understood by a tiny handful of Git users (<a href="#fig-xkcd_git" class="hyperref">Figure <span class="ref">2</span></a> and <a href="#fig-xkcd_git_title_text" class="hyperref">Figure <span class="ref">3</span></a>).<sup id="cha-0_footnote-ref-4" class="footnote"><a href="#cha-0_footnote-4">4</a></sup><span class="intersentencespace"></span> The good news is that the set of Git commands needed to be productive is relatively small; there are some pointers to more advanced and theory-oriented resources listed in <a href="git_fragment.html#sec-conclusion" class="hyperref">Section <span class="ref">5</span></a>, but in this tutorial we focus on the essential commands needed to be <em>dangerous</em>.</p>
<div class="center figure" id="fig-xkcd_git" data-tralics-id="uid8" data-number="2">
<div class="graphics image"><img src="images/figures/git.png" alt="images/figures/git"></div><div class="caption"><span class="header">Figure 2: </span><span class="description">“<a href="https://m.xkcd.com/1597/" target="_blank">Git</a>” via the webcomic <a href="http://xkcd.com/" target="_blank">xkcd</a>.<span class="intersentencespace"></span> See also the <a href="http://www.explainxkcd.com/wiki/index.php/title_text" target="_blank">title text</a> (<a href="#fig-xkcd_git_title_text" class="hyperref">Figure <span class="ref">3</span></a>).
</span></div></div>
<div id="fig-xkcd_git_title_text" data-tralics-id="uid9" data-number="3" class="figure">
<blockquote class="quotation"><p><em>If that doesn’t fix it, git.txt contains the phone number of a friend of mine who understands git.<span class="intersentencespace"></span> Just wait through a few minutes of “It’s really pretty simple, just think of branches as…” and eventually you’ll learn the commands that will fix everything.</em><span class="intersentencespace"></span> <span class="break"></span></p>
</blockquote><div class="caption"><span class="header">Figure 3: </span><span class="description">The <a href="http://www.explainxkcd.com/wiki/index.php/title_text" target="_blank">title text</a> from <a href="#fig-xkcd_git" class="hyperref">Figure <span class="ref">2</span></a>.
</span></div></div>
<div id="sec-getting_started" data-tralics-id="cid1" class="section" data-number="1"><h2><a href="git_fragment.html#sec-getting_started" class="heading hyperref"><span class="number">1 </span>Getting started</a></h2>
<p>To see how version control works and what benefits it brings, it helps to have a concrete application in mind, so we’ll be making a simple project consisting of a small website.<span class="intersentencespace"></span> We’ll begin by installing Git (if necessary) and doing some one-time configuration.<span class="intersentencespace"></span> Then we’ll create the new project and start tracking its changes with Git.</p>
<p>For reference, important commands from this section are summarized in <a href="git_fragment.html#table-getting_started" class="hyperref">Table <span class="ref">1</span></a>.</p>
<div id="sec-installation_and_setup" data-tralics-id="uid10" class="subsection" data-number="1.1"><h3><a href="git_fragment.html#sec-installation_and_setup" class="heading hyperref"><span class="number">1.1 </span>Installation and setup</a></h3>
<p>Before doing anything else, we first need to verify that Git is installed on the present system.<span class="intersentencespace"></span> As a reminder, we’re working in the Unix tradition, so it is strongly recommended that you use Macintosh OS X or Linux (possibly via a virtual machine (<a href="git_fragment.html#aside-using_unix" class="hyperref">Box <span class="ref">3</span></a>)).</p>
<div class="aside" id="aside-using_unix" data-tralics-id="uid11" data-number="3"><div class="heading"><span class="number">Box 3.</span> 

<span class="description">Using Unix</span></div>
<p>This tutorial, as with the others in the <a href="http://learnenough.com/" target="_blank">Learn Enough™ to Be Dangerous</a> series, assumes you have access to a computer running some variant of Unix.<span class="intersentencespace"></span> If you already run Macintosh OS X or Linux, you’re good to go, but if you’re on Windows you should install a <em>Linux Virtual Machine</em> as described below:</p>
<ol>
<li>Install the right version of <a href="https://www.virtualbox.org/" target="_blank">VirtualBox</a> for your system (free).<span class="intersentencespace"></span>
</li>
<li>Download the <a href="https://softcover-static.s3.amazonaws.com/LearnEnough-v.1.4.ova" target="_blank">Learn Enough Virtual Machine</a> (large file).<span class="intersentencespace"></span>
</li>
<li>Once the download is complete, double-click the resulting “OVA” file and follow the instructions to install the Virtual Machine (VM).<span class="intersentencespace"></span>
</li>
<li>Double-click the VM itself and log in using the default user’s password, which is “<code class="tt">foobar!</code>”.<span class="intersentencespace"></span>
</li></ol>
<p>The result will be a Linux desktop environment (including a command-line terminal program, text editor, and Git) pre-configured for this tutorial.</p>
<p>In the longer run, I recommend switching to a Mac as soon as possible.<span class="intersentencespace"></span> (<em>Warning</em>: This might start a <a href="http://www.learnenough.com/text-editor-tutorial#aside-holy_wars" target="_blank">holy war</a>.)<span class="intersentencespace"></span> You might have to save up a bit, as Macs are generally more expensive than Windows machines, but in most cases the increased productivity will quickly pay for the difference.<span class="intersentencespace"></span> (If you find yourself liking Linux, feel free to stick with it, but Macs are generally easier to use with a better user interface.<span class="intersentencespace"></span> Plus, you can always run Linux inside a VM, even on a Mac.)<span class="intersentencespace"></span></p>

</div><p>The easiest way to check for Git is to start a terminal window and use <code>which</code><sup id="cha-0_footnote-ref-5" class="footnote"><a href="#cha-0_footnote-5">5</a></sup> at the command line to see if the <code>git</code> executable is already present:</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> which git
<span class="go">/usr/local/bin/git</span>
</pre></div></div>
<p>If the result is empty, it means you have to install Git manually.<span class="intersentencespace"></span> To do this, follow the instructions at “<a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank">Getting Started – Installing Git</a>” in the official Git documentation.<span class="intersentencespace"></span> (This will likely give you an opportunity to apply some technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>).)</p>
<p>After installing Git but before starting a project, we need to perform a series of one-time setup steps, as shown in <a href="git_fragment.html#code-global_config" class="hyperref">Listing <span class="ref">1</span></a>.<span class="intersentencespace"></span> These are <em>global</em> setups, meaning you only have to do them once per computer.<span class="intersentencespace"></span> Note that the name and email address you use in your Git configuration will be available in any repositories you make public, so don’t expose any information you’d rather keep private.</p>
<div class="codelisting" id="code-global_config" data-tralics-id="uid17" data-number="1"><div class="heading"><span class="number">Listing 1:</span> 

<span class="description">One-time global configuration settings</span>
</div>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> git config --global user.name <span class="s2">"Your Name"</span>
<span class="gp">$</span> git config --global user.email your.email@example.com
<span class="gp">$</span> git config --global alias.co checkout
</pre></div></div></div><p>Only the first two lines above are strictly necessary; the optional third line is included so that you can use <code>git co</code> in place of the more verbose <code>git checkout</code>.<span class="intersentencespace"></span> For maximum compatibility with systems that don’t have <code>co</code> configured, this tutorial will use the full <code>checkout</code> command, but in real life I nearly always use <code>git co</code>.</p>
<div id="sec-prompt_branches_and_tab_completion" data-tralics-id="uid18" class="subsubsection" data-number="1.1.1"><h4><a href="#sec-prompt_branches_and_tab_completion" class="heading">Prompt branches and tab completion</a></h4>
<p>At this point, you should be ready to go, but before moving on there are a couple of other features I recommend adding.<span class="intersentencespace"></span> Following these steps should be within your capabilities if you completed <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a> and <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>, but they are optional, so you can skip this section if you run into trouble.</p>
<p>First, we can arrange for the command-line prompt to include the name of the current <em>branch</em> (alluded to in <a href="#fig-xkcd_git_title_text" class="hyperref">Figure <span class="ref">3</span></a> and covered starting in <a href="git_fragment.html#sec-branching_and_merging" class="hyperref">Section <span class="ref">3.3</span></a>).<span class="intersentencespace"></span> Second, we can add the ability to fill in Git branch names using <a href="https://www.learnenough.com/command-line-tutorial#aside-tab_completion" target="_blank"><em>tab completion</em></a>, which is especially convenient when dealing with longer branch names.<span class="intersentencespace"></span> Both of these features come as shell scripts with the Git source code distribution, but it can be difficult to track them down on the local system, so I’ve placed copies on the Learn Enough™ <a href="https://en.wikipedia.org/wiki/Content_delivery_network" target="_blank">CDN</a> for convenience.<span class="intersentencespace"></span> As described in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>, we can download such files using <code>curl</code>, as shown in <a href="git_fragment.html#code-git_shell_scripts" class="hyperref">Listing <span class="ref">2</span></a>.</p>
<div class="codelisting" id="code-git_shell_scripts" data-tralics-id="uid19" data-number="2"><div class="heading"><span class="number">Listing 2:</span> 

<span class="description">Downloading scripts for branch display and tab completion.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="gp">$</span> curl -o ~/.git-prompt.sh       -OL cdn.learnenough.com/git-prompt.sh
<span class="gp">$</span> curl -o ~/.git-completion.bash -OL cdn.learnenough.com/git-completion.bash
</pre></div></div></div><p>Here the <code>-o</code> flag arranges to save the files locally under slightly different names from the ones on the server, prepending a dot <code>.</code> so that the files are <a href="https://www.learnenough.com/command-line-tutorial#sec-hidden_files" target="_blank">hidden</a> and saving them in the home directory <code>~</code>.</p>
<p>After downloading the scripts as in <a href="git_fragment.html#code-git_shell_scripts" class="hyperref">Listing <span class="ref">2</span></a>, on some systems we need to make them executable, which we can do with the <code>chmod</code> command (as <a href="http://www.learnenough.com/text-editor-tutorial#sec-writing_an_executable_script" target="_blank">mentioned</a> in <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>):</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> chmod +x ~/.git-prompt.sh
<span class="gp">$</span> chmod +x ~/.git-completion.bash
</pre></div></div>
<p>Next, we need to tell the shell about the new commands, so open up the Bash profile file in your favorite editor (which for simplicity I’ll assume is Atom):</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> atom ~/.bash_profile
</pre></div></div>
<p>Then add the configuration shown in <a href="git_fragment.html#code-git_configuration" class="hyperref">Listing <span class="ref">3</span></a> to the bottom of the file.<span class="intersentencespace"></span> Also, make sure to delete any other lines starting with <code>PS1</code> (which you’ll have to do if you modified <code>.bash_profile</code> <a href="http://www.learnenough.com/text-editor-tutorial#code-customize_prompt" target="_blank">as shown</a> in <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>).</p>
<div class="codelisting" id="code-git_configuration" data-tralics-id="uid20" data-number="3"><div class="heading"><span class="number">Listing 3:</span> 

<span class="description">Git configuration in the <code>.bash_profile</code> file.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/.bash_profile</span></span>
</div>

<div class="code"><div class="highlight"><pre>.
.
.
<span class="c"># Git configuration</span>
<span class="c"># Branch name in prompt</span>
<span class="nb">source</span> ~/.git-prompt.sh
<span class="nv">PS1</span><span class="o">=</span><span class="s1">'[\W$(__git_ps1 " (%s)")]\$ '</span>
<span class="nb">export </span><span class="nv">PROMPT_COMMAND</span><span class="o">=</span><span class="s1">'echo -ne "\033]0;${PWD/#$HOME/~}\007"'</span>
<span class="c"># Tab completion for branch names</span>
<span class="nb">source</span> ~/.git-completion.bash
</pre></div></div></div><p><em>Note</em>: The vertical dots in <a href="git_fragment.html#code-git_configuration" class="hyperref">Listing <span class="ref">3</span></a> indicate omitted content and should not be copied literally.<span class="intersentencespace"></span> This is the sort of thing you can figure out using your technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>).<span class="intersentencespace"></span> Speaking of which, I have hardly any idea of what most of the code in <a href="git_fragment.html#code-git_configuration" class="hyperref">Listing <span class="ref">3</span></a> means; part of having technical sophistication means be able to copy things from the Internet and get them to work even when you have no idea what you’re doing (<a href="git_fragment.html#fig-no_idea" class="hyperref">Figure <span class="ref">4</span></a>).<sup id="cha-0_footnote-ref-6" class="footnote"><a href="#cha-0_footnote-6">6</a></sup></p>
<div class="center figure" id="fig-no_idea" data-tralics-id="uid22" data-number="4">
<div class="graphics image"><img src="images/figures/no_idea.jpg" alt="images/figures/no_idea"></div><div class="caption"><span class="header">Figure 4: </span><span class="description">It’s OK—neither does anyone else.
</span></div></div>
<p>Once we’ve saved the result of editing <code>.bash_profile</code>, we have to <em>source</em> it to make the changes active (as <a href="http://www.learnenough.com/text-editor-tutorial#code-source_command" target="_blank">discussed</a> in <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>).</p>
<div class="code"><div class="highlight"><pre><span class="gp">$</span> <span class="nb">source</span> ~/.bash_profile
</pre></div></div>
<p>Figuring out if this worked will have to wait until <a href="git_fragment.html#sec-our_first_commit" class="hyperref">Section <span class="ref">1.3</span></a>, where the prompt should change from</p>
<div class="code"><div class="highlight"><pre>[website]$
</pre></div></div>
<p>to</p>
<div class="code"><div class="highlight"><pre>[website (master)]$
</pre></div></div>
<p>after we initialize the repository.<span class="intersentencespace"></span> We’ll also be able to tab-complete, e.g., the <code>master</code> branch by typing <code>git checkout m⇥</code> instead of typing it all out.<span class="intersentencespace"></span> (In fact, with the configuration shown in <a href="git_fragment.html#code-global_config" class="hyperref">Listing <span class="ref">1</span></a>, we could type the even more compact <code>git co m⇥</code>.)</p>
</div>
<div id="sec-exercises_getting_started" data-tralics-id="uid23" class="subsubsection" data-number="1.1.2"><h4><a href="#sec-exercises_getting_started" class="heading">Exercises</a></h4>
<ol>
<li>Run <code>git help</code> at the command line.<span class="intersentencespace"></span> What is the first command listed?<span class="intersentencespace"></span>
</li>
<li>There’s a chance that the full output of <code>git help</code> was too big to fit in your terminal, with most of it just scrolling by.<span class="intersentencespace"></span> What’s the command to let us navigate the output of <code>git help</code> interactively?<span class="intersentencespace"></span> <em>Hint</em>: <a href="https://www.learnenough.com/command-line-tutorial#sec-wordcount_and_pipes" target="_blank">Pipe</a> the output to <a href="https://www.learnenough.com/command-line-tutorial#sec-less_is_more" target="_blank"><code>less</code></a>.<span class="intersentencespace"></span>
</li>
<li>Git stores global configuration settings in a hidden text file located in your home directory.<span class="intersentencespace"></span> By inspecting the file <code>~/.gitconfig</code> with a tool of your choice (<code>cat</code>, <code>less</code>, a text editor, etc.), confirm that the configuration set up by <a href="git_fragment.html#code-global_config" class="hyperref">Listing <span class="ref">1</span></a> corresponds to simple text entries in this file.<span class="intersentencespace"></span>
</li></ol>
</div></div>
<div id="sec-initializing_the_repo" data-tralics-id="uid27" class="subsection" data-number="1.2"><h3><a href="git_fragment.html#sec-initializing_the_repo" class="heading hyperref"><span class="number">1.2 </span>Initializing the repo</a></h3>
<p>Now it’s time to start creating a project and put it under version control with Git.<span class="intersentencespace"></span> We’ll be making a simple website consisting of two pages, a Home page and an About page.<sup id="cha-0_footnote-ref-7" class="footnote"><a href="#cha-0_footnote-7">7</a></sup><span class="intersentencespace"></span> We’ll begin by making a directory with the generic name <code>website</code> inside a repository directory, <code>repos</code>:</p>
<div class="code"><div class="highlight"><pre>[~]$ mkdir -p repos/website
</pre></div></div>
<p>Here we’ve used the “make directory” command <code>mkdir</code> <a href="https://www.learnenough.com/command-line-tutorial#sec-making_directories" target="_blank">covered</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>, together with the <code>-p</code> option, which arranges for <code>mkdir</code> to create intermediate directories as required (in this case, <code>repos</code>).<span class="intersentencespace"></span> Note also that I’ve included the current directory in the prompt (in this case, <code>[~]</code>) as arranged by the configuration in <a href="git_fragment.html#code-git_configuration" class="hyperref">Listing <span class="ref">3</span></a>.</p>
<p>After making the directory, we can <code>cd</code> into it as follows:</p>
<div class="code"><div class="highlight"><pre>[~]$ cd repos/website/
[website]$
</pre></div></div>
<p>(<a href="https://www.learnenough.com/command-line-tutorial#aside-tab_completion" target="_blank">Recall</a> that you can use tab completion when changing directories, so in real life I would probably type something like <code>cd re⇥w⇥</code>.)<span class="intersentencespace"></span> Note that now the prompt displays the name of the new directory (<code>[website]</code>), as promised in <a href="git_fragment.html#sec-prompt_branches_and_tab_completion" class="hyperref">Section <span class="ref">1.1.1</span></a>.</p>
<p>Even though the <code>website</code> directory is empty, we can already <em>initialize</em> the repository using the <code>init</code> command, which creates a special hidden directory where Git stores the information it needs to track our project’s changes.<span class="intersentencespace"></span> All Git commands consist of the command-line program <code>git</code> followed by the name of the command, so the full command to initialize a repository is <code>git init</code>:</p>
<div class="code"><div class="highlight"><pre>[website]$ git init
Initialized empty Git repository in /Users/mhartl/repos/website/.git/
[website (master)]$
</pre></div></div>
<p>As shown above and again in <a href="git_fragment.html#fig-git_prompt" class="hyperref">Figure <span class="ref">5</span></a>, the prompt should now display the <em>branch name</em>, which in this case is Git’s default branch, called <code>master</code>.<sup id="cha-0_footnote-ref-8" class="footnote"><a href="#cha-0_footnote-8">8</a></sup><span class="intersentencespace"></span> If the prompt doesn’t display the branch name, it means that the configuration from <a href="git_fragment.html#sec-prompt_branches_and_tab_completion" class="hyperref">Section <span class="ref">1.1.1</span></a> isn’t working properly, so use your technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>) to resolve the issue.</p>
<div class="center figure" id="fig-git_prompt" data-tralics-id="uid30" data-number="5">
<div class="graphics image"><img src="images/figures/git_prompt.png" alt="images/figures/git_prompt"></div><div class="caption"><span class="header">Figure 5: </span><span class="description">The Git prompt with the branch name.
</span></div></div>
<div id="sec-exercises_initializing_the_repo" data-tralics-id="uid31" class="subsubsection" data-number="1.2.1"><h4><a href="#sec-exercises_initializing_the_repo" class="heading">Exercises</a></h4>
<ol>
<li>Run the command to list all files and directories to determine the name of the hidden directory used by Git.<span class="intersentencespace"></span> <em>Hint</em>: See “<a href="https://www.learnenough.com/command-line-tutorial#sec-listing" target="_blank">Listing</a>” in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>.<span class="intersentencespace"></span>
</li>
<li>Using the result of the previous exercise, guess the name of the main configuration file located in the hidden Git directory.<span class="intersentencespace"></span> Use <code>cat</code> to dump its contents to the screen.<span class="intersentencespace"></span>
</li></ol>
</div></div>
<div id="sec-our_first_commit" data-tralics-id="uid34" class="subsection" data-number="1.3"><h3><a href="git_fragment.html#sec-our_first_commit" class="heading hyperref"><span class="number">1.3 </span>Our first commit</a></h3>
<p>Git won’t let us complete the initialization of the repository while it’s empty, so we need to make a change to the current directory.<span class="intersentencespace"></span> We’ll make a more substantive change in a moment, but for now we’ll follow a common convention and simply use <code>touch</code> to create an empty file (as <a href="https://www.learnenough.com/command-line-tutorial#code-ls_no_such" target="_blank">mentioned</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>).<span class="intersentencespace"></span> In this case, we’re making a simple website, and the <a href="https://en.wikipedia.org/wiki/Webserver_directory_index" target="_blank">near-universal convention</a> is to call the main page <code>index.html</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ touch index.html
</pre></div></div>
<p>Having created this first file, we can use the <code>git status</code> command to see the result:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master

Initial commit

<span class="hll">Untracked files:
</span>  (use "git add &lt;file&gt;..." to include in what will be committed)

  index.html

nothing added to commit but untracked files present (use "git add" to track)
</pre></div></div>
<p>We see here that the <code>index.html</code> file is “untracked”, which means Git doesn’t yet know about it.<span class="intersentencespace"></span> We can <em>add</em> it using the <code>git add</code> command:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git add -A
</pre></div></div>
<p>Here the <code>-A</code> option tells Git to add <em>all</em> untracked files, even though in this case there’s only one.<span class="intersentencespace"></span> In my experience, 99% of the time you add files you’ll want to add them all, so this is a good habit to cultivate, and learning how to add individual files is left as an exercise (<a href="git_fragment.html#sec-exercises_our_first_commit" class="hyperref">Section <span class="ref">1.3.1</span></a>).<span class="intersentencespace"></span> (By the way, the equivalent command <code>git add .</code>, where the dot refers to the <a href="https://www.learnenough.com/command-line-tutorial#sec-navigating_directories" target="_blank">current directory</a>, is also common.)</p>
<p>We can see the result of <code>git add -A</code> by running <code>git status</code> again:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)

  new file:   index.html
</pre></div></div>
<p>As implied by the word “unstage”, the status of the file has been promoted from <em>untracked</em> to <em>staged</em>, which means the file is ready to be added to the repository.<span class="intersentencespace"></span> <em>Untracked/unstaged</em> and <em>staged</em> are two of the four states commonly used by Git, as shown in <a href="git_fragment.html#fig-git_status_sequence" class="hyperref">Figure <span class="ref">6</span></a>.</p>
<div class="center figure" id="fig-git_status_sequence" data-tralics-id="uid35" data-number="6">
<div class="graphics image"><img src="images/figures/git_status_sequence.png" alt="images/figures/git_status_sequence"></div><div class="caption"><span class="header">Figure 6: </span><span class="description">The main Git status sequence for a changing file.
</span></div></div>
<p>As shown in <a href="git_fragment.html#fig-git_status_sequence" class="hyperref">Figure <span class="ref">6</span></a>, after putting changes in the staging area we can make them part of the local repository by <em>committing</em> them using <code>git commit</code>.<span class="intersentencespace"></span> (We’ll cover the final step from <a href="git_fragment.html#fig-git_status_sequence" class="hyperref">Figure <span class="ref">6</span></a>, <code>git push</code>, in <a href="git_fragment.html#sec-adding_a_readme" class="hyperref">Section <span class="ref">2.3</span></a>.)<span class="intersentencespace"></span> Most uses of <code>git commit</code> use the command-line option <code>-m</code> to include a <em>message</em> indicating the purpose of the commit (<a href="git_fragment.html#aside-commit_messages" class="hyperref">Box <span class="ref">4</span></a>).<span class="intersentencespace"></span> In this case, the purpose is to initialize the new repository, which we can indicate as follows:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git commit -m "Initialize repository"
[master (root-commit) 879392a] Initialize repository
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 index.html
</pre></div></div>
<p>(I’ve shown my output here for completeness, but your details will vary.)</p>
<div class="aside" id="aside-commit_messages" data-tralics-id="uid36" data-number="4"><div class="heading"><span class="number">Box 4.</span> 

<span class="description">Committing to Git</span></div>
<p>By design, Git requires every commit to include a <em>commit message</em> describing the purpose of the commit.<span class="intersentencespace"></span> Typically, this takes the form of a single line, usually limited to around 72 characters, with an optional longer message if desired (<a href="git_fragment.html#sec-exercises_merge_conflicts" class="hyperref">Section <span class="ref">4.2.3</span></a>).<span class="intersentencespace"></span> Although conventions for commit messages vary (<a href="git_fragment.html#fig-xkcd_git_commit" class="hyperref">Figure <span class="ref">7</span></a>),<sup id="cha-0_footnote-ref-9" class="footnote"><a href="#cha-0_footnote-9">9</a></sup> the style adopted in this tutorial is to write commit messages in the <em>present tense</em> using the <a href="http://en.wikipedia.org/wiki/Imperative_mood" target="_blank"><em>imperative mood</em></a>, as in “Initialize repository” rather than “Initializes repository” or “Initialized repository”.<span class="intersentencespace"></span> The reason for this convention is that Git models commits as a series of text transformations, and in this context it makes sense to describe what each commit <em>does</em> instead of what it did.<span class="intersentencespace"></span> Moreover, this usage agrees with the convention followed by the commit messages generated by Git commands themselves (e.g., “merge” rather than “merges” or “merged”).<span class="intersentencespace"></span> For more information, see the GitHub article “<a href="https://github.com/blog/926-shiny-new-commit-styles" target="_blank">Shiny new commit styles</a>”.</p>

</div><div class="center figure" id="fig-xkcd_git_commit" data-tralics-id="uid38" data-number="7">
<div class="graphics image"><img src="images/figures/xkcd_git_commit.png" alt="images/figures/xkcd_git_commit"></div><div class="caption"><span class="header">Figure 7: </span><span class="description">“<a href="https://m.xkcd.com/1296/" target="_blank">Git Commit</a>” via <a href="http://xkcd.com/" target="_blank">xkcd</a>.
</span></div></div>
<p>At this point, we can use <code>git log</code> to see a record of our commit:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git log
commit 879392a6bd8dd505f21876869de99d73f40299cc
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Dec 17 20:00:34 2015 -0800

    Initialize repository
</pre></div></div>
<p>The commit is identified by a <em>hash</em>, which is a unique string of letters and numbers that lets Git retrieve the changes made in the commit.<span class="intersentencespace"></span> In my case, the hash appears as</p>
<div class="code"><div class="highlight"><pre>879392a6bd8dd505f21876869de99d73f40299cc
</pre></div></div>
<p>but since each hash is unique your result will differ.<span class="intersentencespace"></span> The hash is often referred to as a “SHA” (pronounced <em>shah</em>) because of the acronym for the <a href="https://en.wikipedia.org/wiki/SHA-1" target="_blank">Secure Hash Algorithm</a> used to generate it.<span class="intersentencespace"></span> We’ll put these SHAs to use in <a href="git_fragment.html#sec-recovering_from_errors" class="hyperref">Section <span class="ref">3.4</span></a>, and several more advanced Git operations require them as well.</p>
<div id="sec-exercises_our_first_commit" data-tralics-id="uid39" class="subsubsection" data-number="1.3.1"><h4><a href="#sec-exercises_our_first_commit" class="heading">Exercises</a></h4>
<ol>
<li>Using the <code>touch</code> command, create empty files called <code>foo</code> and <code>bar</code> in your repository directory.<span class="intersentencespace"></span>
</li>
<li>By using <code>git add foo</code>, add <code>foo</code> to the staging area.<span class="intersentencespace"></span> Confirm with <code>git status</code> that it worked.<span class="intersentencespace"></span>
</li>
<li>Using <code>git commit -m</code> and an appropriate message, add <code>foo</code> to the repository.<span class="intersentencespace"></span>
</li>
<li>By using <code>git add bar</code>, add <code>bar</code> to staging area.<span class="intersentencespace"></span> Confirm with <code>git status</code> that it worked.<span class="intersentencespace"></span>
</li>
<li>Now run <code>git commit</code> <em>without</em> the <code>-m</code> option.<span class="intersentencespace"></span> Use your <a href="http://www.learnenough.com/text-editor-tutorial#sec-vim" target="_blank">Vim knowledge</a> to add the message “Add bar”, save, and quit.<span class="intersentencespace"></span>
</li>
<li>Using <code>git log</code>, confirm that the commits made in the previous exercises worked correctly.<span class="intersentencespace"></span>
</li></ol>
</div></div>
<div id="sec-viewing_the_diff" data-tralics-id="uid46" class="subsection" data-number="1.4"><h3><a href="git_fragment.html#sec-viewing_the_diff" class="heading hyperref"><span class="number">1.4 </span>Viewing the diff</a></h3>
<p>It’s often useful to be able to view the changes represented by a potential commit before making it.<span class="intersentencespace"></span> To see how this works, let’s add a little bit of content to <code>index.html</code> by <a href="https://www.learnenough.com/command-line-tutorial#sec-redirecting_and_appending" target="_blank">redirecting the output</a> of <code>echo</code> to make a “hello, world” page:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ echo "hello, world" &gt; index.html
</pre></div></div>
<p><a href="https://www.learnenough.com/command-line-tutorial#sec-redirecting_and_appending" target="_blank">Recall</a> from <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a> that the Unix <code>diff</code> utility lets us compare two files <code>foo</code> and <code>bar</code> by typing</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ diff foo bar
</pre></div></div>
<p>Git has a similar function, <code>git diff</code>, which by default just shows the difference between the last commit and unstaged changes in the current project:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git diff
<span class="gh">diff --git a/index.html b/index.html</span>
<span class="gh">index e69de29..4b5fa63 100644</span>
<span class="gd">--- a/index.html</span>
<span class="gi">+++ b/index.html</span>
<span class="gu">@@ -0,0 +1 @@</span>
<span class="gi">+hello, world</span>
</pre></div></div>
<p>Because the content added in <a href="git_fragment.html#sec-our_first_commit" class="hyperref">Section <span class="ref">1.3</span></a> was empty, here the diff appears simply as an addition:</p>
<div class="code"><div class="highlight"><pre><span class="gi">+hello, world</span>
</pre></div></div>
<p>We can commit this change by passing the <code>-a</code> option (for “all”) to <code>git commit</code>, which arranges to commit all the changes in currently existing files (<a href="git_fragment.html#code-git_commit_a_m" class="hyperref">Listing <span class="ref">4</span></a>).</p>
<div class="codelisting" id="code-git_commit_a_m" data-tralics-id="uid47" data-number="4"><div class="heading"><span class="number">Listing 4:</span> 

<span class="description">Committing changes to all modified files.</span>
</div>

<div class="code"><div class="highlight"><pre>[website (master)]$ git commit -a -m "Add content to index.html"
[master 03aff34] Add content to index.html
 1 file changed, 1 insertion(+)
</pre></div></div></div><p>Note that the <code>-a</code> option includes changes only to files already added to the repository, so when there are new files it’s important to run <code>git add -A</code> as in <a href="git_fragment.html#sec-our_first_commit" class="hyperref">Section <span class="ref">1.3</span></a> to make sure they’re added properly.<span class="intersentencespace"></span> It’s easy to get in the habit of running <code>git commit -a</code> and forget to add new files explicitly; learning how to deal with this situation is left as an exercise (<a href="git_fragment.html#sec-exercises_viewing_the_diff" class="hyperref">Section <span class="ref">1.4.1</span></a>).</p>
<p>Having added and committed the changes, there’s now no diff:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git diff
[website (master)]$
</pre></div></div>
<p>(In fact, simply adding the changes is sufficient; running <code>git add -A</code> would also lead to there being no diff.)<span class="intersentencespace"></span> We can confirm that the change went through by running <code>git log</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git log
commit 03aff34ec4f9690228e057a4252bcca169a868b4
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Dec 17 20:03:33 2015 -0800

    Add content to index.html

commit 879392a6bd8dd505f21876869de99d73f40299cc
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Dec 17 20:00:34 2015 -0800

    Initialize repository
</pre></div></div>
<div id="sec-exercises_viewing_the_diff" data-tralics-id="uid48" class="subsubsection" data-number="1.4.1"><h4><a href="#sec-exercises_viewing_the_diff" class="heading">Exercises</a></h4>
<ol>
<li>Use <code>touch</code> to create an empty file called <code>baz</code>.<span class="intersentencespace"></span> What happens if you run <code>git commit -am "Add baz"</code>?<span class="intersentencespace"></span>
</li>
<li>Add <code>baz</code> to the staging area using <code>git add -A</code>, then commit with the message <code>"Add bazz"</code>.<span class="intersentencespace"></span>
</li>
<li>Realizing there’s a typo in your commit message, change <code>bazz</code> to <code>baz</code> using <code>git commit --amend</code>.<span class="intersentencespace"></span>
</li>
<li>Run <code>git log</code> to get the SHA of the last commit, then view the diff using <code>git show &lt;SHA&gt;</code> to verify that the message was amended properly.<span class="intersentencespace"></span>
</li></ol>
</div></div>
<div id="sec-adding_a_tag" data-tralics-id="uid53" class="subsection" data-number="1.5"><h3><a href="git_fragment.html#sec-adding_a_tag" class="heading hyperref"><span class="number">1.5 </span>Adding an HTML tag</a></h3>
<p>We’ve now seen all of the major elements involved in the simplest Git workflow, so in this section and the next we’ll review what we’ve done and see how everything fits together.<span class="intersentencespace"></span> We’ll err on the side of making more frequent commits, representing relatively modest changes, but this isn’t necessarily how you should work in real life (<a href="git_fragment.html#aside-commitment_issues" class="hyperref">Box <span class="ref">5</span></a>).<span class="intersentencespace"></span> Still, it’s an excellent foundation, and it will give you a solid base on which to build your own workflow and development practices.</p>
<div class="aside" id="aside-commitment_issues" data-tralics-id="uid54" data-number="5"><div class="heading"><span class="number">Box 5.</span> 

<span class="description">Commitment issues</span></div>
<p>One common issue when learning Git involves figuring out when to make a commit.<span class="intersentencespace"></span> Unfortunately, there’s no simple answer, and real-life usage varies considerably (<a href="git_fragment.html#fig-xkcd_git_commit" class="hyperref">Figure <span class="ref">7</span></a>).<span class="intersentencespace"></span> My best advice is to make a commit whenever you’ve reached a natural stopping point, or when you’ve made enough changes that you’re starting to worry about losing them.<span class="intersentencespace"></span> In practice, this can lead to inconsistent results, and it’s common to work for a while and make a large commit and then make a minor unrelated change with a small commit.<span class="intersentencespace"></span> This mismatch between commit sizes can seem a little weird, but it’s a difficult situation to avoid.</p>
<p>Many teams (including most open-source projects) have their own conventions for commits, including the practice of <em>squashing</em> commits to combine them all into one commit for convenience.<span class="intersentencespace"></span> (Per <a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>, this is exactly the kind of thing you can learn about by <a href="http://lmgtfy.com/?q=git+squash+commits" target="_blank">Googling for it</a>.)<span class="intersentencespace"></span> In these circumstances, I recommend following the conventions adopted by the project in question.</p>
<p>More than anything, don’t worry about it too much.<span class="intersentencespace"></span> <a href="git_fragment.html#fig-xkcd_git_commit" class="hyperref">Figure <span class="ref">7</span></a> is a only a slight exaggeration, and in any case deciding when to commit is the kind of thing that you’ll invariably get better at with time and experience.</p>

</div><p>As in previous sections, we’ll be working on the main <code>index.html</code> file.<span class="intersentencespace"></span> Let’s start by opening this file in both a text editor and in a web browser.<span class="intersentencespace"></span> My preferred method for doing this is at the command line using the <code>atom</code> and <code>open</code> commands (though the latter works only on Macintosh OS X):</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ atom index.html
[website (master)]$ open index.html
</pre></div></div>
<p>If you’re not on a Mac (or even if you are), you can open the directory using a graphical file browser and double-clicking the file to open it in the default browser (<a href="git_fragment.html#fig-index_filesystem_browser" class="hyperref">Figure <span class="ref">8</span></a>).<span class="intersentencespace"></span> However you open the file, the results should appear approximately as shown in <a href="git_fragment.html#fig-hello_world_atom" class="hyperref">Figure <span class="ref">9</span></a> and <a href="git_fragment.html#fig-hello_world_browser" class="hyperref">Figure <span class="ref">10</span></a>.</p>
<div class="center figure" id="fig-index_filesystem_browser" data-tralics-id="uid55" data-number="8">
<div class="graphics image"><img src="images/figures/index_filesystem_browser.png" alt="images/figures/index_filesystem_browser"></div><div class="caption"><span class="header">Figure 8: </span><span class="description">Viewing <code>index.html</code> in a filesystem browser.
</span></div></div>
<div class="center figure" id="fig-hello_world_atom" data-tralics-id="uid56" data-number="9">
<div class="graphics image"><img src="images/figures/hello_world_atom.png" alt="images/figures/hello_world_atom"></div><div class="caption"><span class="header">Figure 9: </span><span class="description">The initial HTML file opened in Atom.
</span></div></div>
<div class="center figure" id="fig-hello_world_browser" data-tralics-id="uid57" data-number="10">
<div class="graphics image"><img src="images/figures/hello_world_safari.png" alt="images/figures/hello_world_safari"></div><div class="caption"><span class="header">Figure 10: </span><span class="description">The initial HTML file viewed in a web browser.
</span></div></div>
<p>At this point, we’re ready to make a change, which is to promote “hello, world” from ordinary text to a top-level (Level 1) heading.<span class="intersentencespace"></span> In HTML, the language of the World Wide Web, the way to do this is with a <em>tag</em>—in this case, the Level 1 header tag <code>h1</code>.<span class="intersentencespace"></span> Most browsers set <code>h1</code> tags in a large font, so the text <code>hello, world</code> should look bigger when we’re done.<span class="intersentencespace"></span> To make the change, replace the current contents of <code>index.html</code> with the contents shown in <a href="git_fragment.html#code-hello_world_h1" class="hyperref">Listing <span class="ref">5</span></a>.<span class="intersentencespace"></span> (In this and all other examples of editing text, you’ll learn more if you type in everything by hand instead of copying and pasting.)</p>
<div class="codelisting" id="code-hello_world_h1" data-tralics-id="uid58" data-number="5"><div class="heading"><span class="number">Listing 5:</span> 

<span class="description">A top-level heading.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>hello, world<span class="nt">&lt;/h1&gt;</span>
</pre></div></div></div><p><a href="git_fragment.html#code-hello_world_h1" class="hyperref">Listing <span class="ref">5</span></a> shows the basic structure used by most HTML tags.<span class="intersentencespace"></span> First, there’s an <em>opening tag</em> that looks like <code>&lt;h1&gt;</code>, where the angle brackets <code>&lt;</code> and <code>&gt;</code> surround the tag name (in this case, <code>h1</code>).<span class="intersentencespace"></span> After the content, there’s a <em>closing tag</em> that’s the same as the opening tag, except with an extra slash after the opening angle bracket: <code>&lt;/h1&gt;</code>.<span class="intersentencespace"></span> (Note that, as with addresses on the World Wide Web, this is a <em>slash</em>, not a <em>backslash</em> (<a href="git_fragment.html#fig-xkcd_slash" class="hyperref">Figure <span class="ref">11</span></a>).<sup id="cha-0_footnote-ref-10" class="footnote intersentence"><a href="#cha-0_footnote-10">10</a></sup><span class="intersentencespace"></span>)</p>
<div class="center figure" id="fig-xkcd_slash" data-tralics-id="uid60" data-number="11">
<div class="graphics image"><img src="images/figures/trade_expert.png" alt="images/figures/trade_expert"></div><div class="caption"><span class="header">Figure 11: </span><span class="description">“<a href="https://m.xkcd.com/727/" target="_blank">Trade expert</a>” opines on <em>slash</em> vs. <em>backslash</em>.
</span></div></div>
<p>Upon refreshing the web browser, the index page should appear something like <a href="git_fragment.html#fig-hello_world_h1" class="hyperref">Figure <span class="ref">12</span></a>.<span class="intersentencespace"></span> As promised, the font size of the text for the top-level heading is bigger (and bolder, too).</p>
<div class="center figure" id="fig-hello_world_h1" data-tralics-id="uid61" data-number="12">
<div class="graphics image"><img src="images/figures/hello_world_h1.png" alt="images/figures/hello_world_h1"></div><div class="caption"><span class="header">Figure 12: </span><span class="description">The result of adding an <code>h1</code> tag.
</span></div></div>
<p>As before, we’ll run <code>git status</code> and <code>git diff</code> to learn more about what we’re going to commit to Git, though with experience you’ll come to run these commands only when necessary.<span class="intersentencespace"></span> The status simply indicates that <code>index.html</code> has been modified:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

  modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")
</pre></div></div>
<p>Meanwhile, the diff shows that one line has been deleted (indicated with <code>-</code>) and another added (indicated with <code>+</code>):</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git diff
<span class="gh">diff --git a/index.html b/index.html</span>
<span class="gh">index 4b5fa63..45d754a 100644</span>
<span class="gd">--- a/index.html</span>
<span class="gi">+++ b/index.html</span>
<span class="gu">@@ -1 +1 @@</span>
<span class="gd">-hello, world</span>
<span class="gi">+&lt;h1&gt;hello, world&lt;/h1&gt;</span>
</pre></div></div>
<p>As with the Unix <code>diff</code> utility, modified sections of code or markup are shown as close to each other as possible so that it’s clear at a glance what changed.</p>
<p>At this point, we’re ready to commit our changes.<span class="intersentencespace"></span> In <a href="git_fragment.html#code-git_commit_a_m" class="hyperref">Listing <span class="ref">4</span></a> we used both the <code>-a</code> and <code>-m</code> options to commit <strong>a</strong>ll pending changes while adding a commit <strong>m</strong>essage, but in fact the two can be combined as <code>-am</code> (<a href="git_fragment.html#code-git_commit_am" class="hyperref">Listing <span class="ref">6</span></a>).</p>
<div class="codelisting" id="code-git_commit_am" data-tralics-id="uid62" data-number="6"><div class="heading"><span class="number">Listing 6:</span> 

<span class="description">Committing with <code>-am</code>.</span>
</div>

<div class="code"><div class="highlight"><pre>[website (master)]$ git commit -am "Add an h1 tag"
</pre></div></div></div><p>Using the <code>-am</code> combination as in <a href="git_fragment.html#code-git_commit_am" class="hyperref">Listing <span class="ref">6</span></a> is common in idiomatic Git usage.</p>
<div id="sec-exercises_adding_a_tag" data-tralics-id="uid63" class="subsubsection" data-number="1.5.1"><h4><a href="#sec-exercises_adding_a_tag" class="heading">Exercises</a></h4>
<ol>
<li>The <code>git log</code> command shows only the commit messages, which makes for a compact display but isn’t particularly detailed.<span class="intersentencespace"></span> Verify by running <code>git log -p</code> that the <code>-p</code> option shows the full diffs represented by each commit.<span class="intersentencespace"></span>
</li>
<li>Under the <code>h1</code> tag in <a href="git_fragment.html#code-hello_world_h1" class="hyperref">Listing <span class="ref">5</span></a>, use the <code>p</code> tag to add a <em>paragraph</em> consisting of the line “Call me Ishmael.”<span class="intersentencespace"></span> The result should appear as in <a href="git_fragment.html#fig-ishmael_paragraph" class="hyperref">Figure <span class="ref">13</span></a>.<span class="intersentencespace"></span> (Don’t worry if you get stuck; we’ll incorporate the answer to this exercise in <a href="git_fragment.html#sec-adding_html_structure" class="hyperref">Section <span class="ref">1.6</span></a> (<a href="git_fragment.html#code-html_structure" class="hyperref">Listing <span class="ref">7</span></a>).)<span class="intersentencespace"></span>
</li></ol>
<div class="center figure" id="fig-ishmael_paragraph" data-tralics-id="uid66" data-number="13">
<div class="graphics image"><img src="images/figures/ishmael_paragraph.png" alt="images/figures/ishmael_paragraph"></div><div class="caption"><span class="header">Figure 13: </span><span class="description">The result of adding a short paragraph.
</span></div></div>
</div></div>
<div id="sec-adding_html_structure" data-tralics-id="uid67" class="subsection" data-number="1.6"><h3><a href="git_fragment.html#sec-adding_html_structure" class="heading hyperref"><span class="number">1.6 </span>Adding HTML structure</a></h3>
<p>Although the web browser correctly rendered the <code>h1</code> tag in <a href="git_fragment.html#fig-hello_world_h1" class="hyperref">Figure <span class="ref">12</span></a>, properly formatted HTML pages have more structure than just bare <code>h1</code> or <code>p</code> tags.<span class="intersentencespace"></span> In particular, each page should have an <code>html</code> tag consisting of a <em>head</em> and a <em>body</em> (identified with <code>head</code> and <code>body</code> tags, respectively), as well as a “doctype” identifying the document type, which in this case is a particular version of HTML called HTML5.<span class="intersentencespace"></span> (Don’t worry about these details now; we’ll cover them in more depth in <a href="http://learnenough.com/html-tutorial" target="_blank"><em>Learn Enough™ HTML to Be Dangerous</em></a>.)</p>
<p>Applying these general considerations to <code>index.html</code> leads to the full HTML structure shown in <a href="git_fragment.html#code-html_structure" class="hyperref">Listing <span class="ref">7</span></a>.<span class="intersentencespace"></span> This includes the <code>h1</code> tag from <a href="git_fragment.html#code-hello_world_h1" class="hyperref">Listing <span class="ref">5</span></a> and the paragraph tag from <a href="git_fragment.html#fig-ishmael_paragraph" class="hyperref">Figure <span class="ref">13</span></a>.<span class="intersentencespace"></span> (The <code>title</code> tag, included inside the <code>head</code> tag, is empty, but in general every page should have a title, and adding one for <code>index.html</code> is left as an exercise (<a href="git_fragment.html#sec-exercises_adding_html_structure" class="hyperref">Section <span class="ref">1.6.1</span></a>).)</p>
<div class="codelisting" id="code-html_structure" data-tralics-id="uid68" data-number="7"><div class="heading"><span class="number">Listing 7:</span> 

<span class="description">The HTML page with added structure.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="lineno"> 1</span> <span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="lineno"> 2</span> <span class="nt">&lt;html&gt;</span>
<span class="lineno"> 3</span>   <span class="nt">&lt;head&gt;</span>
<span class="lineno"> 4</span>     <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
<span class="lineno"> 5</span>   <span class="nt">&lt;/head&gt;</span>
<span class="lineno"> 6</span>   <span class="nt">&lt;body&gt;</span>
<span class="lineno"> 7</span>     <span class="nt">&lt;h1&gt;</span>hello, world<span class="nt">&lt;/h1&gt;</span>
<span class="lineno"> 8</span>     <span class="nt">&lt;p&gt;</span>Call me Ishmael.<span class="nt">&lt;/p&gt;</span>
<span class="lineno"> 9</span>   <span class="nt">&lt;/body&gt;</span>
<span class="lineno">10</span> <span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>Because this is a lot more content than our previous iteration (<a href="git_fragment.html#code-hello_world_h1" class="hyperref">Listing <span class="ref">5</span></a>), it’s a good idea to go through it line by line:</p>
<ol>
<li>The document type declaration
</li>
<li>Opening <code>html</code> tag
</li>
<li>Opening <code>head</code> tag
</li>
<li>Opening and closing <code>title</code> tags
</li>
<li>Closing <code>head</code> tag
</li>
<li>Opening <code>body</code> tag
</li>
<li>Top-level heading
</li>
<li>Paragraph from the exercises (<a href="git_fragment.html#sec-exercises_adding_a_tag" class="hyperref">Section <span class="ref">1.5.1</span></a>)
</li>
<li>Closing <code>body</code> tag
</li>
<li>Closing <code>html</code> tag
</li></ol>
<p>As usual, we can see the changes represented by our addition using <code>git diff</code> (<a href="git_fragment.html#code-diff_html_structure" class="hyperref">Listing <span class="ref">8</span></a>).</p>
<div class="codelisting" id="code-diff_html_structure" data-tralics-id="uid79" data-number="8"><div class="heading"><span class="number">Listing 8:</span> 

<span class="description">The diff for adding HTML structure.</span>
</div>

<div class="code"><div class="highlight"><pre>[website (master)]$ git diff
<span class="gh">diff --git a/index.html b/index.html</span>
<span class="gh">index 4b5fa63..afcd202 100644</span>
<span class="gd">--- a/index.html</span>
<span class="gi">+++ b/index.html</span>
<span class="gu">@@ -1 +1,10 @@</span>
<span class="gd">-&lt;h1&gt;hello, world&lt;/h1&gt;</span>
<span class="gi">+&lt;!DOCTYPE html&gt;</span>
<span class="gi">+&lt;html&gt;</span>
<span class="gi">+  &lt;head&gt;</span>
<span class="gi">+    &lt;title&gt;&lt;/title&gt;</span>
<span class="gi">+  &lt;/head&gt;</span>
<span class="gi">+  &lt;body&gt;</span>
<span class="gi">+    &lt;h1&gt;hello, world&lt;/h1&gt;</span>
<span class="gi">+    &lt;p&gt;Call me Ishmael.&lt;/p&gt;</span>
<span class="gi">+  &lt;/body&gt;</span>
<span class="gi">+&lt;/html&gt;</span>
</pre></div></div></div><p>Despite the extensive diffs in <a href="git_fragment.html#code-diff_html_structure" class="hyperref">Listing <span class="ref">8</span></a>, there are hardly any user-visible differences (<a href="git_fragment.html#fig-html_structure" class="hyperref">Figure <span class="ref">14</span></a>); the only change from <a href="git_fragment.html#fig-ishmael_paragraph" class="hyperref">Figure <span class="ref">13</span></a> is a small amount of space above the top-level heading.<span class="intersentencespace"></span> The structure is much better, though, and brings our page nearly into compliance with the HTML5 standard.<span class="intersentencespace"></span> (It’s not quite valid because a nonblank page title is required, which we’ll fix in <a href="git_fragment.html#sec-exercises_adding_html_structure" class="hyperref">Section <span class="ref">1.6.1</span></a>.)</p>
<div class="center figure" id="fig-html_structure" data-tralics-id="uid80" data-number="14">
<div class="graphics image"><img src="images/figures/html_structure.png" alt="images/figures/html_structure"></div><div class="caption"><span class="header">Figure 14: </span><span class="description">Adding HTML structure makes hardly any difference in the appearance.
</span></div></div>
<p>Since we haven’t added any files, using <code>git commit -am</code> suffices to commit all the changes (<a href="git_fragment.html#code-commit_html_structure" class="hyperref">Listing <span class="ref">9</span></a>).</p>
<div class="codelisting" id="code-commit_html_structure" data-tralics-id="uid81" data-number="9"><div class="heading"><span class="number">Listing 9:</span> 

<span class="description">The commit to add the HTML structure.</span>
</div>

<div class="code"><div class="highlight"><pre>[website (master)]$ git commit -am "Add some HTML structure"
</pre></div></div></div>
<div id="sec-exercises_adding_html_structure" data-tralics-id="uid82" class="subsubsection" data-number="1.6.1"><h4><a href="#sec-exercises_adding_html_structure" class="heading">Exercises</a></h4>
<ol>
<li>Add the title “A whale of a greeting” to <code>index.html</code>.<span class="intersentencespace"></span> Browsers differ in how they display titles; the result in Google Chrome is shown in <a href="git_fragment.html#fig-page_title" class="hyperref">Figure <span class="ref">15</span></a>.<span class="intersentencespace"></span>
</li>
<li>Commit the new title with a commit message of your choice.<span class="intersentencespace"></span> Verify using <code>git log -p</code> that the change was committed as expected.<span class="intersentencespace"></span>
</li>
<li>By pasting the contents of <a href="git_fragment.html#code-html_structure" class="hyperref">Listing <span class="ref">7</span></a> into an <a href="https://validator.w3.org/#validate_by_input" target="_blank">HTML validator</a>, verify that it is <em>not</em> (quite) a valid web page.<span class="intersentencespace"></span>
</li>
<li>Using the validator, verify that the current <code>index.html</code> (with nonblank page title) <em>is</em> valid.<span class="intersentencespace"></span>
</li></ol>
<div class="center figure" id="fig-page_title" data-tralics-id="uid87" data-number="15">
<div class="graphics image"><img src="images/figures/page_title.png" alt="images/figures/page_title"></div><div class="caption"><span class="header">Figure 15: </span><span class="description">The page title displayed in a browser.
</span></div></div>
</div></div>
<div id="sec-summary_getting_started" data-tralics-id="uid88" class="subsection" data-number="1.7"><h3><a href="git_fragment.html#sec-summary_getting_started" class="heading hyperref"><span class="number">1.7 </span>Summary</a></h3>
<p>Important commands from this section are summarized in <a href="git_fragment.html#table-getting_started" class="hyperref">Table <span class="ref">1</span></a>.</p>
<div id="table-getting_started" data-tralics-id="uid89" data-number="1" class="table"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left"><strong>Command</strong></td>
<td class="align_left"><strong>Description</strong></td>
<td class="align_left"><strong>Example</strong></td>
</tr><tr><td class="align_left"><code class="tt">git help</code></td>
<td class="align_left">Get help on a command</td>
<td class="align_left"><code>$ git help push</code></td>
</tr><tr><td class="align_left"><code class="tt">git config</code></td>
<td class="align_left">Configure Git</td>
<td class="align_left"><code>$ git config --global …</code></td>
</tr><tr><td class="align_left"><code class="tt">source &lt;file&gt;</code></td>
<td class="align_left">Activate Bash changes</td>
<td class="align_left"><code>$ source ~/.bash_profile</code></td>
</tr><tr><td class="align_left"><code class="tt">mkdir -p</code></td>
<td class="align_left">Make intermediate directories as necessary</td>
<td class="align_left"><code>$ mkdir -p repos/website</code></td>
</tr><tr><td class="align_left"><code class="tt">git status</code></td>
<td class="align_left">Show the status of the repository</td>
<td class="align_left"><code>$ git status</code></td>
</tr><tr><td class="align_left"><code class="tt">touch &lt;name&gt;</code></td>
<td class="align_left">Create empty file</td>
<td class="align_left"><code>$ touch foo</code></td>
</tr><tr><td class="align_left"><code class="tt">git add -A</code></td>
<td class="align_left">Add all files or directories to staging area</td>
<td class="align_left"><code>$ git add -A</code></td>
</tr><tr><td class="align_left"><code class="tt">git add &lt;name&gt;</code></td>
<td class="align_left">Add given file or directory to staging area</td>
<td class="align_left"><code>$ git add foo</code></td>
</tr><tr><td class="align_left"><code class="tt">git commit -m</code></td>
<td class="align_left">Commit staged changes with a message</td>
<td class="align_left"><code>$ git commit -m "Add thing"</code></td>
</tr><tr><td class="align_left"><code class="tt">git commit -am</code></td>
<td class="align_left">Stage and commit changes with a message</td>
<td class="align_left"><code>$ git commit -am "Add thing"</code></td>
</tr><tr><td class="align_left"><code class="tt">git diff</code></td>
<td class="align_left">Show diffs between commits, branches, etc.<span class="intersentencespace"></span></td>
<td class="align_left"><code>$ git diff</code></td>
</tr><tr><td class="align_left"><code class="tt">git commit --amend</code></td>
<td class="align_left">Amend the last commit</td>
<td class="align_left"><code>$ git commit --amend</code></td>
</tr><tr><td class="align_left"><code class="tt">git show &lt;SHA&gt;</code></td>
<td class="align_left">Show diff vs. the SHA</td>
<td class="align_left"><code>$ git show fb738e…</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 1: </span><span class="description">Important commands from <a href="git_fragment.html#sec-getting_started" class="hyperref">Section <span class="ref">1</span></a>.
</span></div></div>
</div></div><div id="sec-sharing" data-tralics-id="cid2" class="section" data-number="2"><h2><a href="git_fragment.html#sec-sharing" class="heading hyperref"><span class="number">2 </span>Backing up and sharing</a></h2>
<p>With the changes made in <a href="git_fragment.html#sec-getting_started" class="hyperref">Section <span class="ref">1</span></a>, we’re now ready to push a copy of our project to a <em>remote repository</em>.<span class="intersentencespace"></span> This will serve as a backup of our project and its history, and will also make it easier for collaborators to work with us on our site.</p>
<p>We’ll start by pushing our project up to <em>GitHub</em>, a site designed to facilitate collaboration with Git repositories.<span class="intersentencespace"></span> For repositories that are publicly available, GitHub is free, so we’ll plan to make our website’s repo public to take advantage of this.<span class="intersentencespace"></span> (GitHub charges for private repositories, but we’ll discuss an alternative in <a href="git_fragment.html#sec-exercises_surprise_bonus" class="hyperref">Section <span class="ref">4.4.1</span></a>.)<span class="intersentencespace"></span> Over time, releasing projects publicly on GitHub serves to build up a portfolio, which is one good reason to make as much work public as possible.<span class="intersentencespace"></span> There’s also a Secret Reason™ for adding our repo to GitHub, which we’ll get to in <a href="git_fragment.html#sec-a_surprise_bonus" class="hyperref">Section <span class="ref">4.4</span></a>.</p>
<p>For reference, important commands from this section are summarized in <a href="git_fragment.html#table-sharing" class="hyperref">Table <span class="ref">2</span></a>.</p>
<div id="sec-github" data-tralics-id="uid90" class="subsection" data-number="2.1"><h3><a href="git_fragment.html#sec-github" class="heading hyperref"><span class="number">2.1 </span>Signing up for GitHub</a></h3>
<p>If you don’t already have a GitHub account, you can get started by visiting the <a href="https://github.com/join" target="_blank">GitHub signup page</a> (<a href="git_fragment.html#fig-join_github" class="hyperref">Figure <span class="ref">16</span></a>) and following the instructions.<span class="intersentencespace"></span> Use your technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>) if you get stuck.</p>
<div class="center figure" id="fig-join_github" data-tralics-id="uid91" data-number="16">
<div class="graphics image"><img src="images/figures/join_github.png" alt="images/figures/join_github"></div><div class="caption"><span class="header">Figure 16: </span><span class="description">Joining GitHub.
</span></div></div>
<p>Once you’ve signed up for GitHub, you’ll need to add <em>SSH keys</em> to your account, which serve as a way to identify trusted computers without requiring passwords.<sup id="cha-0_footnote-ref-11" class="footnote"><a href="#cha-0_footnote-11">11</a></sup><span class="intersentencespace"></span> To do this, follow the steps in the GitHub article “<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank">Generating SSH Keys</a>” (<a href="git_fragment.html#fig-generating_ssh_keys" class="hyperref">Figure <span class="ref">17</span></a>).<span class="intersentencespace"></span> This is a good application of the command-line knowledge from <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>, and is an <em>excellent</em> exercise in technical sophistication.<span class="intersentencespace"></span> In particular, following the GitHub tutorial on generating SSH keys will help you develop an essential technical skill:</p>
<blockquote class="quotation"><p>It’s important to able to follow a series of commands <em>even if you don’t completely understand them</em>.<span class="intersentencespace"></span></p>
</blockquote><p>Even <em>I</em> don’t completely understand the commands at “<a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank">Generating SSH Keys</a>”, and that’s OK.<span class="intersentencespace"></span> All you need is enough technical sophistication to follow the steps (and resolve any errors that occur) even if you’re not 100% sure of what you’re doing (<a href="git_fragment.html#fig-no_idea" class="hyperref">Figure <span class="ref">4</span></a>).</p>
<div class="center figure" id="fig-generating_ssh_keys" data-tralics-id="uid93" data-number="17">
<div class="graphics image"><img src="images/figures/generating_ssh_keys.png" alt="images/figures/generating_ssh_keys"></div><div class="caption"><span class="header">Figure 17: </span><span class="description">The GitHub tutorial on generating SSH keys.
</span></div></div>
<p>One neat thing about the GitHub SSH keys tutorial is that it detects the system you’re on and customizes the tutorial accordingly.<span class="intersentencespace"></span> For example, on my system (Macintosh OS X), the SSH tutorial includes the step</p>
<div class="code"><div class="highlight"><pre>$ pbcopy &lt; ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard
</pre></div></div>
<p>which works only on a Mac.<span class="intersentencespace"></span> This customization is fine for most situations, but sometimes it will fail.<span class="intersentencespace"></span> For example, if you are on a Macintosh or Windows computer but are using the Linux virtual machine from <a href="git_fragment.html#aside-using_unix" class="hyperref">Box <span class="ref">3</span></a>, you need the instructions for Linux, not for your native OS.<span class="intersentencespace"></span> In that case, either use a browser on the system for which you need instructions or look for menu items with links to the right platform (<a href="git_fragment.html#fig-github_ssh_menu" class="hyperref">Figure <span class="ref">18</span></a>).</p>
<div class="center figure" id="fig-github_ssh_menu" data-tralics-id="uid94" data-number="18">
<div class="graphics image"><img src="images/figures/github_ssh_menu.png" alt="images/figures/github_ssh_menu"></div><div class="caption"><span class="header">Figure 18: </span><span class="description">Menu links for the SSH tutorial on different systems.
</span></div></div>
<div id="sec-exercises_github" data-tralics-id="uid95" class="subsubsection" data-number="2.1.1"><h4><a href="#sec-exercises_github" class="heading">Exercises</a></h4>
<ol>
<li>Read the <a href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank">SSH article on Wikipedia</a> until you finish it or run out of motivation to continue.<span class="intersentencespace"></span>
</li></ol>
</div></div>
<div id="sec-remote_repo" data-tralics-id="uid97" class="subsection" data-number="2.2"><h3><a href="git_fragment.html#sec-remote_repo" class="heading hyperref"><span class="number">2.2 </span>Remote repo</a></h3>
<p>After signing up for a GitHub account, the next step is to create a remote repository.<span class="intersentencespace"></span> Start by selecting the menu item for adding a new repository, as shown in <a href="git_fragment.html#fig-add_new_repository" class="hyperref">Figure <span class="ref">19</span></a>, and then fill in the repository name (“website”) and description (“A sample website for Learn Enough Git to Be Dangerous”) as shown in <a href="git_fragment.html#fig-create_a_new_repository" class="hyperref">Figure <span class="ref">20</span></a>.<span class="intersentencespace"></span> GitHub actively develops its user interface, so <a href="git_fragment.html#fig-add_new_repository" class="hyperref">Figure <span class="ref">19</span></a>, <a href="git_fragment.html#fig-create_a_new_repository" class="hyperref">Figure <span class="ref">20</span></a>, and other GitHub screenshots may not match your results exactly, but this is no cause for concern.<span class="intersentencespace"></span> As usual, apply your technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>) to resolve any discrepancies.</p>
<div class="center figure" id="fig-add_new_repository" data-tralics-id="uid98" data-number="19">
<div class="graphics image"><img src="images/figures/add_new_repository.png" alt="images/figures/add_new_repository"></div><div class="caption"><span class="header">Figure 19: </span><span class="description">Adding a new repository at GitHub.
</span></div></div>
<div class="center figure" id="fig-create_a_new_repository" data-tralics-id="uid99" data-number="20">
<div class="graphics image"><img src="images/figures/create_a_new_repository.png" alt="images/figures/create_a_new_repository"></div><div class="caption"><span class="header">Figure 20: </span><span class="description">Creating a new repository.
</span></div></div>
<p>After clicking the green “Create repository” button seen in <a href="git_fragment.html#fig-create_a_new_repository" class="hyperref">Figure <span class="ref">20</span></a>, you should see a page like <a href="git_fragment.html#fig-pushing_up_repo" class="hyperref">Figure <span class="ref">21</span></a> containing instructions for how to <em>push</em> your local repository up to GitHub.<span class="intersentencespace"></span> The exact commands will be tailored to your personal account name; the template looks like <a href="git_fragment.html#code-github_push_template" class="hyperref">Listing <span class="ref">10</span></a>.</p>
<div class="codelisting" id="code-github_push_template" data-tralics-id="uid100" data-number="10"><div class="heading"><span class="number">Listing 10:</span> 

<span class="description">A template for the first push to GitHub.</span>
</div>

<div class="code"><div class="highlight"><pre>[website (master)]$ git remote add origin https://github.com/&lt;username&gt;/website.git
[website (master)]$ git push -u origin master
</pre></div></div></div><p>Of course, you should replace <code>&lt;username&gt;</code> with your actual username.<span class="intersentencespace"></span> For example, the commands for my username, which is <code>mhartl</code>, look like this (which you can also see in <a href="git_fragment.html#fig-pushing_up_repo" class="hyperref">Figure <span class="ref">21</span></a>):</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git remote add origin https://github.com/mhartl/website.git
[website (master)]$ git push -u origin master
</pre></div></div>
<p>The two commands in <a href="git_fragment.html#code-github_push_template" class="hyperref">Listing <span class="ref">10</span></a> first set GitHub as the <em>remote origin</em> and then <em>push</em> the full repository.<span class="intersentencespace"></span> The <code>-u</code> option to <code>git push</code> sets GitHub as the <em>upstream repository</em>, which means we’ll be able to download any changes automatically when we run <code>git pull</code> starting in <a href="git_fragment.html#sec-clone_push_pull" class="hyperref">Section <span class="ref">4.1</span></a>.<span class="intersentencespace"></span> Don’t worry too much about these details, though; you will almost always copy such commands from GitHub and probably won’t ever have to figure them out on your own.</p>
<div class="center figure" id="fig-pushing_up_repo" data-tralics-id="uid101" data-number="21">
<div class="graphics image"><img src="images/figures/pushing_up_repo.png" alt="images/figures/pushing_up_repo"></div><div class="caption"><span class="header">Figure 21: </span><span class="description">Instructions for pushing up the repo.
</span></div></div>
<p>After executing the first <code>git push</code> as shown in <a href="git_fragment.html#code-github_push_template" class="hyperref">Listing <span class="ref">10</span></a>, you should reload the current page (using, e.g., ⌘R or the icon shown in <a href="git_fragment.html#fig-reload_page" class="hyperref">Figure <span class="ref">22</span></a>).<span class="intersentencespace"></span> The result should look something like <a href="git_fragment.html#fig-remote_repo" class="hyperref">Figure <span class="ref">23</span></a>.<span class="intersentencespace"></span> If it does, you have officially shipped your first Git repository!</p>
<div class="center figure" id="fig-reload_page" data-tralics-id="uid102" data-number="22">
<div class="graphics image"><img src="images/figures/reload_page.png" alt="images/figures/reload_page"></div><div class="caption"><span class="header">Figure 22: </span><span class="description">The browser reload page button.
</span></div></div>
<div class="center figure" id="fig-remote_repo" data-tralics-id="uid103" data-number="23">
<div class="graphics image"><img src="images/figures/remote_repo.png" alt="images/figures/remote_repo"></div><div class="caption"><span class="header">Figure 23: </span><span class="description">The remote repository at GitHub.
</span></div></div>
<div id="sec-exercises_remote_repo" data-tralics-id="uid104" class="subsubsection" data-number="2.2.1"><h4><a href="#sec-exercises_remote_repo" class="heading">Exercises</a></h4>
<ol>
<li>On the GitHub page for your repo, click on “Commits” to see a list of your commits.<span class="intersentencespace"></span> Confirm that they match the results of running <code>git log</code> on your local system.
</li>
<li>At GitHub, click on the commit for adding HTML structure (<a href="git_fragment.html#code-commit_html_structure" class="hyperref">Listing <span class="ref">9</span></a>).<span class="intersentencespace"></span> Verify that the diff for the commit agrees with the one shown in <a href="git_fragment.html#code-diff_html_structure" class="hyperref">Listing <span class="ref">8</span></a>.
</li>
<li>In honor of shipping your first Git repo, drink a celebratory beverage of your choice (<a href="git_fragment.html#fig-champagne" class="hyperref">Figure <span class="ref">24</span></a>).<sup id="cha-0_footnote-ref-12" class="footnote"><a href="#cha-0_footnote-12">12</a></sup>
</li></ol>
<div class="center figure" id="fig-champagne" data-tralics-id="uid109" data-number="24">
<div class="graphics image"><img src="images/figures/champagne.png" alt="images/figures/champagne"></div><div class="caption"><span class="header">Figure 24: </span><span class="description">Shipping a project often calls for a celebratory beverage.
</span></div></div>
</div></div>
<div id="sec-adding_a_readme" data-tralics-id="uid110" class="subsection" data-number="2.3"><h3><a href="git_fragment.html#sec-adding_a_readme" class="heading hyperref"><span class="number">2.3 </span>Adding a README</a></h3>
<p>Now that we’ve pushed up our repository, let’s add a second file and practice the <code>add</code>, <code>commit</code>, and <code>push</code> sequence shown in <a href="git_fragment.html#fig-git_status_sequence" class="hyperref">Figure <span class="ref">6</span></a>.<span class="intersentencespace"></span> You may have noticed in <a href="git_fragment.html#fig-remote_repo" class="hyperref">Figure <span class="ref">23</span></a> that GitHub encourages the presence of a README file via the note “Help people interested in this repository understand your project by adding a README.”<span class="intersentencespace"></span> Such a file literally asks the viewer to “READ ME”, <em>à la</em> the DRINK ME bottle from <a href="https://www.cs.indiana.edu/metastuff/wonder/ch1.html" target="_blank"><em>Alice’s Adventures in Wonderland</em></a> (<a href="git_fragment.html#fig-drink_me" class="hyperref">Figure <span class="ref">25</span></a>),<sup id="cha-0_footnote-ref-13" class="footnote"><a href="#cha-0_footnote-13">13</a></sup> and it’s a good practice to include one.</p>
<div class="center figure" id="fig-drink_me" data-tralics-id="uid112" data-number="25">
<div class="graphics image"><img src="images/figures/drink_me.jpg" alt="images/figures/drink_me"></div><div class="caption"><span class="header">Figure 25: </span><span class="description">Alice would know to read a README file.
</span></div></div>
<p><a href="git_fragment.html#fig-remote_repo" class="hyperref">Figure <span class="ref">23</span></a> shows a green <code>Add a README</code> button that GitHub includes to make it easy to add a README file through the web interface, but we’ll follow the common (and more instructive) practice of adding it by hand locally and then pushing it up.<span class="intersentencespace"></span> When it comes to rendering and displaying READMEs, GitHub supports several common formats, but my favorite format for short documents like READMEs is Markdown, a lightweight markup language <a href="http://www.learnenough.com/text-editor-tutorial#sec-opening" target="_blank">discussed before</a> in <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>.</p>
<p>We can get started by opening <code>README.md</code> in Atom (or any other text editor), where the <code>.md</code> extension identifies the file as Markdown:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ atom README.md
</pre></div></div>
<p>We can then fill it with the content shown in <a href="git_fragment.html#code-readme" class="hyperref">Listing <span class="ref">11</span></a>.</p>
<div class="codelisting" id="code-readme" data-tralics-id="uid113" data-number="11"><div class="heading"><span class="number">Listing 11:</span> 

<span class="description">The contents of the README file.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/README.md</span></span>
</div>

<div class="code"><div class="highlight"><pre># Sample Website

This is a sample website made as part of
[*Learn Enough™ Git to Be Dangerous*](http://learnenough.com/git-tutorial),
possibly the greatest beginner Git tutorial in the history of the Universe.
You should totally [check it out](http://learnenough.com/git-tutorial),
and be sure to [join the email list](http://learnenough.com/#email_list) and
[follow @learnenough](http://twitter.com/learnenough) on Twitter.

After finishing *Learn Enough™ Git to Be Dangerous*, I'll know enough Git to be
*dangerous*. This means I'll be able to use Git to track changes in my projects,
back up data, share my work with others, and collaborate with programmers and
other users of Git.
</pre></div></div></div><p>The result in Atom appears as shown in <a href="git_fragment.html#fig-atom_readme" class="hyperref">Figure <span class="ref">26</span></a>.<span class="intersentencespace"></span> As <a href="http://www.learnenough.com/text-editor-tutorial#sec-previewing_markdown" target="_blank">mentioned</a> in <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>, Atom includes a Markdown previewer via the Packages menu item shown in <a href="git_fragment.html#fig-markdown_preview_menu" class="hyperref">Figure <span class="ref">27</span></a>, which (after resizing the window) results in the preview shown in <a href="git_fragment.html#fig-atom_markdown_preview" class="hyperref">Figure <span class="ref">28</span></a>.<sup id="cha-0_footnote-ref-14" class="footnote"><a href="#cha-0_footnote-14">14</a></sup></p>
<div class="center figure" id="fig-atom_readme" data-tralics-id="uid115" data-number="26">
<div class="graphics image"><img src="images/figures/atom_readme.png" alt="images/figures/atom_readme"></div><div class="caption"><span class="header">Figure 26: </span><span class="description">The README file viewed in Atom.
</span></div></div>
<div class="center figure" id="fig-markdown_preview_menu" data-tralics-id="uid116" data-number="27">
<div class="graphics image"><img src="images/figures/markdown_preview_menu.png" alt="images/figures/markdown_preview_menu"></div><div class="caption"><span class="header">Figure 27: </span><span class="description">The Packages menu item for toggling the Markdown preview.
</span></div></div>
<div class="center figure" id="fig-atom_markdown_preview" data-tralics-id="uid117" data-number="28">
<div class="graphics image"><img src="images/figures/atom_markdown_preview.png" alt="images/figures/atom_markdown_preview"></div><div class="caption"><span class="header">Figure 28: </span><span class="description">The resized Atom window with a Markdown preview.
</span></div></div>
<p>Now that we’ve created the <code>README.md</code> file, we’re ready to add it to our Git repository and push it up.<span class="intersentencespace"></span> We can’t just run <code>git commit -am</code> because <code>README.md</code> isn’t currently in the repository, so we have to add it first:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git add -A
</pre></div></div>
<p>(As noted in <a href="git_fragment.html#sec-exercises_our_first_commit" class="hyperref">Section <span class="ref">1.3.1</span></a>, we could also run <code>git add README.md</code>, but in most cases we want to add all the new files, so I suggest getting in the habit of running <code>git add -A</code> unless there’s a specific reason not to.)<span class="intersentencespace"></span> Then we commit as usual:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git commit -m "Add README file"
</pre></div></div>
<p>By the way, there’s no harm in including <code>-a</code> via the <code>-am</code> combination shown in <a href="git_fragment.html#code-git_commit_am" class="hyperref">Listing <span class="ref">6</span></a> (and despite the redundancy I often do so out of habit), so this could just as easily read <code>git commit -am "Add a README file"</code>.<span class="intersentencespace"></span> (The call to <code>git add</code> is still necessary, though; recall from <a href="git_fragment.html#sec-viewing_the_diff" class="hyperref">Section <span class="ref">1.4</span></a> that <code>git commit -a</code> by itself commits changes only to files that Git is already tracking and have been modified.)</p>
<p>Having added the file to the repository and made a commit, we’re now ready to push up to GitHub.<span class="intersentencespace"></span> Recall from <a href="git_fragment.html#code-github_push_template" class="hyperref">Listing <span class="ref">10</span></a> that the first occurrence of <code>git push</code> included the “set upstream” option <code>-u</code>, the destination <code>origin</code>, and the branch name <code>master</code>, but once these are set up we can omit all those details and just <code>push</code>, like this:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git push
</pre></div></div>
<p>The result of this is to push up the new README to the remote repository, which means that we’ve completed the full sequence shown in <a href="git_fragment.html#fig-git_status_sequence" class="hyperref">Figure <span class="ref">6</span></a>.<span class="intersentencespace"></span> In this case, GitHub uses the <code>.md</code> extension to identify the file as Markdown, converting it to HTML for easy viewing,<sup id="cha-0_footnote-ref-15" class="footnote"><a href="#cha-0_footnote-15">15</a></sup> as shown in <a href="git_fragment.html#code-readme" class="hyperref">Listing <span class="ref">11</span></a>.</p>
<div class="center figure" id="fig-readme" data-tralics-id="uid119" data-number="29">
<div class="graphics image"><img src="images/figures/readme.png" alt="images/figures/readme"></div><div class="caption"><span class="header">Figure 29: </span><span class="description">The README file at GitHub.
</span></div></div>
<div id="sec-exercises_adding_a_readme" data-tralics-id="uid120" class="subsubsection" data-number="2.3.1"><h4><a href="#sec-exercises_adding_a_readme" class="heading">Exercises</a></h4>
<ol>
<li>Using the Markdown shown in <a href="git_fragment.html#code-official_git_documentation" class="hyperref">Listing <span class="ref">12</span></a>, add a line at the end of the README with a link to the official Git documentation.
</li>
<li>Commit your change with an appropriate message (<a href="git_fragment.html#aside-commit_messages" class="hyperref">Box <span class="ref">4</span></a>).<span class="intersentencespace"></span> You don’t have to run <code>git add</code>.<span class="intersentencespace"></span> Why not?
</li>
<li>Push your change to GitHub.<span class="intersentencespace"></span> By refreshing your browser, confirm that the new line has been added to the rendered README.<span class="intersentencespace"></span> Click on the “official Git documentation” link to verify that it works.
</li></ol>
<div class="codelisting" id="code-official_git_documentation" data-tralics-id="uid124" data-number="12"><div class="heading"><span class="number">Listing 12:</span> 

<span class="description">Markdown code for adding a link to the official Git documentation.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/README.md</span></span>
</div>

<div class="code"><div class="highlight"><pre>For more information on Git, see the
[official Git documentation](https://git-scm.com/).
</pre></div></div></div></div></div>
<div id="sec-summary_sharing" data-tralics-id="uid125" class="subsection" data-number="2.4"><h3><a href="git_fragment.html#sec-summary_sharing" class="heading hyperref"><span class="number">2.4 </span>Summary</a></h3>
<p>Important commands from this section are summarized in <a href="git_fragment.html#table-sharing" class="hyperref">Table <span class="ref">2</span></a>.</p>
<div id="table-sharing" data-tralics-id="uid126" data-number="2" class="table"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left"><strong>Command</strong></td>
<td class="align_left"><strong>Description</strong></td>
<td class="align_left"><strong>Example</strong></td>
</tr><tr><td class="align_left"><code class="tt">git remote add</code></td>
<td class="align_left">Add remote repo</td>
<td class="align_left"><code>$ git remote add origin</code></td>
</tr><tr><td class="align_left"><code class="tt">git push -u &lt;loc&gt; &lt;br&gt;</code></td>
<td class="align_left">Push to branch to remote</td>
<td class="align_left"><code>$ git push -u origin master</code></td>
</tr><tr><td class="align_left"><code class="tt">git push</code></td>
<td class="align_left">Push to default remote</td>
<td class="align_left"><code>$ git push</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 2: </span><span class="description">Important commands from <a href="git_fragment.html#sec-sharing" class="hyperref">Section <span class="ref">2</span></a>.
</span></div></div>
</div></div><div id="sec-intermediate_workflow" data-tralics-id="cid3" class="section" data-number="3"><h2><a href="git_fragment.html#sec-intermediate_workflow" class="heading hyperref"><span class="number">3 </span>Intermediate workflow</a></h2>
<p>In this section, we’ll practice and extend the basic workflow introduced in <a href="git_fragment.html#sec-adding_a_readme" class="hyperref">Section <span class="ref">2.3</span></a>.<span class="intersentencespace"></span> This will include adding a new directory to our project, learning how to tell Git to ignore certain files, how to <em>branch</em> and <em>merge</em>, and how to recover from errors.<span class="intersentencespace"></span> Rather than providing an encyclopedic coverage of Git’s many commands, our focus is on covering practical techniques used every day by software developers and other users of Git.</p>
<p>For reference, important commands from this section are summarized in <a href="git_fragment.html#table-intermediate_workflow" class="hyperref">Table <span class="ref">3</span></a>.</p>
<div id="sec-commit_push_repeat" data-tralics-id="uid127" class="subsection" data-number="3.1"><h3><a href="git_fragment.html#sec-commit_push_repeat" class="heading hyperref"><span class="number">3.1 </span>Commit, push, repeat</a></h3>
<p>We’ll start by adding an image to our site, which involves making a change to an existing file (<code>index.html</code>) while adding a new file in a new directory.<span class="intersentencespace"></span> The first step is to make a directory for images:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ mkdir images
</pre></div></div>
<p>Next, download the image shown in <a href="git_fragment.html#fig-breaching_whale" class="hyperref">Figure <span class="ref">30</span></a><sup id="cha-0_footnote-ref-16" class="footnote"><a href="#cha-0_footnote-16">16</a></sup> to the local directory using <code>curl</code>:</p>
<div class="code"><div class="highlight"><pre>$ curl -o images/breaching_whale.jpg \
&gt;      -OL https://cdn.learnenough.com/breaching_whale.jpg
</pre></div></div>
<p>Note here that you should type the backslash character <code>\</code> in the first line, but you <em>shouldn’t</em> type the literal angle bracket <code>&gt;</code> in the second line.<span class="intersentencespace"></span> The <code>\</code> is used for a <em>line continuation</em>, and after hitting return the <code>&gt;</code> will be added automatically by your shell program.</p>
<div class="center figure" id="fig-breaching_whale" data-tralics-id="uid129" data-number="30">
<div class="graphics image"><img src="images/figures/breaching_whale.jpg" alt="images/figures/breaching_whale"></div><div class="caption"><span class="header">Figure 30: </span><span class="description">An image to include in our website.
</span></div></div>
<p>We’re now ready to include the image in our index page using the <em>image tag</em> <code>img</code>.<span class="intersentencespace"></span> This is a new kind of HTML tag; before we had opening and closing tags like</p>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;p&gt;</span>content<span class="nt">&lt;/p&gt;</span>
</pre></div></div>
<p>but the image tag is different.<span class="intersentencespace"></span> Unlike tags like <code>h1</code> and <code>p</code>, the <code>img</code> tag <em>self-closing</em>, which means that it starts with <code>&lt;img</code> and ends with <code>/&gt;</code>:</p>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"path/to/file"</span> <span class="nt">/&gt;</span>
</pre></div></div>
<p>Note that <code>img</code> has no content between tags because there’s no “between”; instead, it has a path to the <em>source</em> of the image, indicated by <code>src</code>.<span class="intersentencespace"></span> By the way, in the example above the path <code>path/to/file</code> is <em>meta</em>, meaning that it talks <em>about</em> the path rather than referring to the literal path itself.<span class="intersentencespace"></span> In such cases, it’s important to use the actual path to the file.<span class="intersentencespace"></span> (Successfully navigating such meta usage is a good sign of increasing technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>).)<span class="intersentencespace"></span> In this case, the path is <code>images/breaching_whale.jpg</code>, so the <code>img</code> tag in <code>index.html</code> should appear as shown in <a href="git_fragment.html#code-img_tag" class="hyperref">Listing <span class="ref">13</span></a>.<span class="intersentencespace"></span> (This image tag is actually missing something important, which we’ll add in <a href="git_fragment.html#sec-merge_conflicts" class="hyperref">Section <span class="ref">4.2</span></a>.)</p>
<div class="codelisting" id="code-img_tag" data-tralics-id="uid130" data-number="13"><div class="heading"><span class="number">Listing 13:</span> 

<span class="description">Adding an image to the index page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/index.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>A whale of a greeting<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>hello, world<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p&gt;</span>Call me Ishmael.<span class="nt">&lt;/p&gt;</span>
<span class="hll">    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"images/breaching_whale.jpg"</span> <span class="nt">/&gt;</span>
</span>  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>Refreshing the browser then gives the result shown in <a href="git_fragment.html#fig-website_with_image" class="hyperref">Figure <span class="ref">31</span></a>.<span class="intersentencespace"></span> (Note that <a href="git_fragment.html#code-img_tag" class="hyperref">Listing <span class="ref">13</span></a> includes the <code>title</code> tag content, thereby incorporating the solution to an exercise in <a href="git_fragment.html#sec-exercises_adding_html_structure" class="hyperref">Section <span class="ref">1.6.1</span></a>.)</p>
<div class="center figure" id="fig-website_with_image" data-tralics-id="uid131" data-number="31">
<div class="graphics image"><img src="images/figures/website_with_image.png" alt="images/figures/website_with_image"></div><div class="caption"><span class="header">Figure 31: </span><span class="description">Our website with an added image.
</span></div></div>
<p>At this point, <code>git diff</code> confirms that the image addition is ready to go:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git diff index.html
<span class="gh">diff --git a/index.html b/index.html</span>
<span class="gh">index 706a1be..74043f7 100644</span>
<span class="gd">--- a/index.html</span>
<span class="gi">+++ b/index.html</span>
<span class="gu">@@ -6,5 +6,6 @@</span>
   &lt;body&gt;
     &lt;h1&gt;hello, world&lt;/h1&gt;
     &lt;p&gt;Call me Ishmael.&lt;/p&gt;
<span class="gi">+    &lt;img src="images/breaching_whale.jpg" /&gt;</span>
   &lt;/body&gt;
 &lt;/html&gt;
</pre></div></div>
<p>On the other hand, running <code>git status</code> shows that the entire <code>images/</code> directory is untracked:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

  modified:   index.html

Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

  images/

no changes added to commit (use "git add" and/or "git commit -a")
</pre></div></div>
<p>As you might guess, <code>git add -A</code> adds all untracked <em>directories</em> in addition to adding all untracked files, so we can add the image and its directory with a single command:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git add -A
</pre></div></div>
<p>We then commit and push as usual:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git commit -m "Add an image"
[website (master)]$ git push
</pre></div></div>
<p>It’s a good idea to get in the habit of pushing up to the remote repository frequently, as it serves as a guaranteed backup of the project while also allowing collaborators to pull in any changes (<a href="git_fragment.html#sec-collaborating" class="hyperref">Section <span class="ref">4</span></a>).</p>
<p>After refreshing the GitHub repository in your browser, you should be able to confirm the presence of the new file by clicking on the <code>images</code> directory link, with the results as shown in <a href="git_fragment.html#fig-images_directory_on_github" class="hyperref">Figure <span class="ref">32</span></a>.</p>
<div class="center figure" id="fig-images_directory_on_github" data-tralics-id="uid132" data-number="32">
<div class="graphics image"><img src="images/figures/images_directory_on_github.png" alt="images/figures/images_directory_on_github"></div><div class="caption"><span class="header">Figure 32: </span><span class="description">The new images directory on GitHub.
</span></div></div>
<div id="sec-exercises_commit_push_repeat" data-tralics-id="uid133" class="subsubsection" data-number="3.1.1"><h4><a href="#sec-exercises_commit_push_repeat" class="heading">Exercises</a></h4>
<ol>
<li>Click on the image link at GitHub to verify that the <code>git push</code> succeeded.
</li>
<li>At this point, the number of commits is large enough that the output of <code>git log -p</code> is probably too big to fit in your terminal window.<span class="intersentencespace"></span> Confirm that running <code>git log -p</code> drops you into a <code>less</code> interface for easier navigation.
</li>
<li>Use your knowledge of <a href="https://www.learnenough.com/command-line-tutorial#table-less_commands" target="_blank"><code>less</code> commands</a> to search for the commit that added the HTML <code>DOCTYPE</code>.<span class="intersentencespace"></span> What is the SHA of the commit?
</li></ol>
</div></div>
<div id="sec-ignoring_files" data-tralics-id="uid137" class="subsection" data-number="3.2"><h3><a href="git_fragment.html#sec-ignoring_files" class="heading hyperref"><span class="number">3.2 </span>Ignoring files</a></h3>
<p>A frequent issue when dealing with Git repositories is coming across files you <em>don’t</em> want to commit.<span class="intersentencespace"></span> These include files containing secret credentials, configuration files that aren’t shared across computers, temporary files, log files, etc.</p>
<p>For example, on Macintosh OS X a common side-effect of using the <a href="https://support.apple.com/en-us/HT201732" target="_blank">Finder</a> to open directories is the creation of a hidden file called <code>.DS_Store</code>.<sup id="cha-0_footnote-ref-17" class="footnote"><a href="#cha-0_footnote-17">17</a></sup><span class="intersentencespace"></span> In case you haven’t run into it yourself, we can simulate such a side-effect by using <code>touch</code> to create a sample <code>.DS_Store</code> file as follows:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ touch .DS_Store
</pre></div></div>
<p>This file now shows up in the status:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

<span class="hll">  .DS_Store
</span>
nothing added to commit but untracked files present (use "git add" to track)
</pre></div></div>
<p>This is annoying, as we have no need to track this file, and indeed it could easily cause conflicts (<a href="git_fragment.html#sec-merge_conflicts" class="hyperref">Section <span class="ref">4.2</span></a>) down the line.</p>
<p>In order to avoid this annoyance, Git lets us <em>ignore</em> such files using a special hidden configuration file called <code>.gitignore</code>.<span class="intersentencespace"></span> To ignore <code>.DS_Store</code>, create a file called <code>.gitignore</code> using your favorite text editor and then fill it with the contents shown in <a href="git_fragment.html#code-gitignore_ds_store" class="hyperref">Listing <span class="ref">14</span></a>.</p>
<div class="codelisting" id="code-gitignore_ds_store" data-tralics-id="uid139" data-number="14"><div class="heading"><span class="number">Listing 14:</span> 

<span class="description">Configuring Git to ignore a file.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/.gitignore</span></span>
</div>

<div class="code"><div class="highlight"><pre>.DS_Store
</pre></div></div></div><p>After saving the contents of <a href="git_fragment.html#code-gitignore_ds_store" class="hyperref">Listing <span class="ref">14</span></a>, the status now picks up the newly added <code>.gitignore</code> file, but it <em>doesn’t</em> list the <code>.DS_Store</code> file, thereby confirming that it’s being ignored:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

<span class="hll">  .gitignore
</span>
nothing added to commit but untracked files present (use "git add" to track)
</pre></div></div>
<p>This is an excellent start, but it would be inconvenient if we had to add the name of every file we want to ignore.<span class="intersentencespace"></span> For instance, the Vim text editor (<a href="http://www.learnenough.com/text-editor-tutorial#sec-vim" target="_blank">covered briefly</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>) sometimes creates <em>temporary files</em> whose names involve appending a tilde <code>~</code> to the end of the normal filename, so you might be editing a file called <code>foo</code> and end up with a file called <code>foo~</code> in your directory.<span class="intersentencespace"></span> In such a case, we would want to ignore <em>all</em> files ending in a tilde.<span class="intersentencespace"></span> To support this case, the <code>.gitignore</code> file also lets us use <em>wildcards</em>, where the asterisk <code>*</code> represents “anything”:<sup id="cha-0_footnote-ref-18" class="footnote"><a href="#cha-0_footnote-18">18</a></sup></p>
<div class="code"><div class="highlight"><pre>*~
</pre></div></div>
<p>Adding the line above to <code>.gitignore</code> would cause all temporary Vim files to be ignored by Git.<span class="intersentencespace"></span> We can also add directories to <code>.gitignore</code>, so that, e.g.,</p>
<div class="code"><div class="highlight"><pre>tmp/
</pre></div></div>
<p>would arrange to ignore all files in the <code>tmp/</code> directory.</p>
<p>Git ignore files can get quite complicated, but in practice you can build them up over time by running <code>git status</code> and looking for any files or directories you don’t want to track, and then adding a corresponding pattern to the <code>.gitignore</code> file.<span class="intersentencespace"></span> In addition, many systems (such as the <a href="http://rubyonrails.org/" target="_blank">Ruby on Rails</a> web framework and the <a href="http://www.softcover.io/" target="_blank">Softcover</a> publishing platform) generate a good starting <code>.gitignore</code> file for you.<sup id="cha-0_footnote-ref-19" class="footnote"><a href="#cha-0_footnote-19">19</a></sup><span class="intersentencespace"></span> See <a href="https://www.railstutorial.org/book/beginning#sec-first_time_setup" target="_blank">Chapter 1</a> of the <a href="http://railstutorial.org/book" target="_blank"><em>Ruby on Rails Tutorial</em></a> for more information.</p>
<div id="sec-exercises_ignoring_files" data-tralics-id="uid142" class="subsubsection" data-number="3.2.1"><h4><a href="#sec-exercises_ignoring_files" class="heading">Exercises</a></h4>
<ol>
<li>Commit the <code>.gitignore</code> file to your repository.<span class="intersentencespace"></span> <em>Hint</em>: Running <code>git commit -am</code> isn’t enough.<span class="intersentencespace"></span> Why not?
</li>
<li>Push your commit up to GitHub and confirm using the web interface that the push succeeded.<span class="intersentencespace"></span>
</li></ol>
</div></div>
<div id="sec-branching_and_merging" data-tralics-id="uid145" class="subsection" data-number="3.3"><h3><a href="git_fragment.html#sec-branching_and_merging" class="heading hyperref"><span class="number">3.3 </span>Branching and merging</a></h3>
<p>One of the most powerful features of Git is its ability to make <em>branches</em>, which are effectively complete self-contained copies of the project source, together with the ability to <em>merge</em> one branch into another.<span class="intersentencespace"></span> The best thing about a branch is that you can make your changes to the project in isolation from the master copy of the code, and then merge your changes in only when they’re done.<span class="intersentencespace"></span> This is especially helpful when collaborating with other users (<a href="git_fragment.html#sec-collaborating" class="hyperref">Section <span class="ref">4</span></a>); having a separate branch lets you make changes independently from other developers, reducing the risk of accidental conflicts.</p>
<p>We’ll use the addition of a second HTML page, an “About page”, as an example of how to use Git branches.<span class="intersentencespace"></span> Our first step is to use <code>git checkout</code> with the <code>-b</code> option, which makes a new branch called <code>about-page</code> and checks it out at the same time, as shown in <a href="git_fragment.html#code-checkout_about_page" class="hyperref">Listing <span class="ref">15</span></a>.<sup id="cha-0_footnote-ref-20" class="footnote"><a href="#cha-0_footnote-20">20</a></sup></p>
<div class="codelisting" id="code-checkout_about_page" data-tralics-id="uid147" data-number="15"><div class="heading"><span class="number">Listing 15:</span> 

<span class="description">Checking out and creating the <code>about-page</code> branch.</span>
</div>

<div class="code"><div class="highlight"><pre>[website (master)]$ git checkout -b about-page
[website (about-page)]$
</pre></div></div></div><p>Note that, per <a href="git_fragment.html#sec-prompt_branches_and_tab_completion" class="hyperref">Section <span class="ref">1.1.1</span></a>, the prompt has changed to reflect the name of the new branch.</p>
<p>We can visualize our repository as shown in <a href="git_fragment.html#fig-git_branch" class="hyperref">Figure <span class="ref">33</span></a>.<span class="intersentencespace"></span> The main repository evolution is a series of commits, and the branch represents a copy of the repo at the time the branch was made.<sup id="cha-0_footnote-ref-21" class="footnote"><a href="#cha-0_footnote-21">21</a></sup><span class="intersentencespace"></span> Our plan is to make a series of changes on the <code>about-page</code> branch, and then incorporate the changes back into the <code>master</code> branch using <code>git merge</code>.</p>
<div class="center figure" id="fig-git_branch" data-tralics-id="uid149" data-number="33">
<div class="graphics image"><img src="images/figures/git_branch.png" alt="images/figures/git_branch"></div><div class="caption"><span class="header">Figure 33: </span><span class="description">Branching off the <code>master</code> branch.
</span></div></div>
<p>We can view the current branches using the <code>git branch</code> command:</p>
<div class="code"><div class="highlight"><pre>[website (about-page)]$ git branch
* about-page
master
</pre></div></div>
<p>This lists all the branches currently defined on the local machine, with an asterisk <code>*</code> indicating the currently checked-out branch.<span class="intersentencespace"></span> (We’ll learn how to list <em>remote</em> branches in <a href="git_fragment.html#sec-pushing_branches" class="hyperref">Section <span class="ref">4.3</span></a>.)</p>
<p>Having checked out the branch for the About page, we’re now ready to start making some changes to our working directory.<span class="intersentencespace"></span> We’ll start by making a new file called <code>about.html</code> to include some information about our project.<span class="intersentencespace"></span> Because we want the new page to have the full HTML structure (as in <a href="git_fragment.html#fig-html_structure" class="hyperref">Figure <span class="ref">14</span></a>), we’ll copy over the <code>index.html</code> file and then edit it as necessary:</p>
<div class="code"><div class="highlight"><pre>[website (about-page)]$ cp index.html about.html
</pre></div></div>
<p>If this duplication seems a little unclean, it is.<span class="intersentencespace"></span> For example, what if there were an error in the HTML structure of <code>index.html</code>?<span class="intersentencespace"></span> Having copied it over to <code>about.html</code>, we’d have to make the correction in both places.<span class="intersentencespace"></span> As we’ll see in <a href="git_fragment.html#sec-pushing_branches" class="hyperref">Section <span class="ref">4.3</span></a>, in fact there <em>is</em> an error, and we <em>will</em> have to make the correction twice.<span class="intersentencespace"></span> This sort of situation is annoying, and it’s far better to use a <em>site template</em> that avoids unnecessary duplication.<span class="intersentencespace"></span> We’ll start learning about how to do that in <a href="http://www.learnenough.com/css-and-layout-tutorial" target="_blank"><em>Learn Enough™ CSS &amp; Layout to Be Dangerous</em></a>.</p>
<p>Throughout the rest of the tutorial, we’ll be editing both <code>index.html</code> and <code>about.html</code>, so this is a good opportunity to use the preferred technique for opening a full project in a text editor (as <a href="http://www.learnenough.com/text-editor-tutorial#sec-editing_projects" target="_blank">covered</a> in <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>).<span class="intersentencespace"></span> I suggest closing all current editor windows and re-opening the project as follows:</p>
<div class="code"><div class="highlight"><pre>[website (about-page)]$ atom .
</pre></div></div>
<p>By doing this, we can use “<a href="http://www.learnenough.com/text-editor-tutorial#sec-fuzzy_opening" target="_blank">fuzzy opening</a>” to open the files of our choice.<span class="intersentencespace"></span> In particular, in Atom we can use ⌘P to open <code>about.html</code> and start making the necessary changes.</p>
<p>After opening <code>about.html</code>, fill it with the contents shown in <a href="git_fragment.html#code-about_html" class="hyperref">Listing <span class="ref">16</span></a>.<span class="intersentencespace"></span> As always, I recommend typing in everything by hand, which will make it easier to see the diffs relative to <a href="git_fragment.html#code-img_tag" class="hyperref">Listing <span class="ref">13</span></a>.</p>
<div class="codelisting" id="code-about_html" data-tralics-id="uid150" data-number="16"><div class="heading"><span class="number">Listing 16:</span> 

<span class="description">The initial HTML for the About page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/about.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
<span class="hll">    <span class="nt">&lt;title&gt;</span>About Us<span class="nt">&lt;/title&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
<span class="hll">    <span class="nt">&lt;h1&gt;</span>About<span class="nt">&lt;/h1&gt;</span>
</span><span class="hll">    <span class="nt">&lt;p&gt;</span>
</span><span class="hll">      This site is a sample project for the <span class="nt">&lt;strong&gt;</span>awesome<span class="nt">&lt;/strong&gt;</span> Git
</span><span class="hll">      tutorial <span class="nt">&lt;em&gt;</span>Learn Enough™ Git to Be Dangerous<span class="nt">&lt;/em&gt;</span>.
</span><span class="hll">    <span class="nt">&lt;/p&gt;</span>
</span>  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p><a href="git_fragment.html#code-about_html" class="hyperref">Listing <span class="ref">16</span></a> introduces two new tags: <code>strong</code> (which most browsers render as <strong>boldface</strong> text) and <code>em</code> for emphasis (which most browsers render as <em>italicized</em> text).</p>
<p>We’re now ready to commit the initial version of the About page.<span class="intersentencespace"></span> Because <code>about.html</code> is a new file, we have to add it and then commit, and I sometimes like to combine these two steps using <code>&amp;&amp;</code> as <a href="https://www.learnenough.com/command-line-tutorial#aside-combining_commands" target="_blank">described</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>:</p>
<div class="code"><div class="highlight"><pre>[website (about-page)]$ git add -A &amp;&amp; git commit -m "Add About page"
</pre></div></div>
<p>At this point, the <code>about-page</code> branch has diverged from <code>master</code>, as shown in <a href="git_fragment.html#fig-about_page_branch_first_diff" class="hyperref">Figure <span class="ref">34</span></a>.</p>
<div class="center figure" id="fig-about_page_branch_first_diff" data-tralics-id="uid151" data-number="34">
<div class="graphics image"><img src="images/figures/about_page_branch_first_diff.png" alt="images/figures/about_page_branch_first_diff"></div><div class="caption"><span class="header">Figure 34: </span><span class="description">The <code>about-page</code> branch with a diff from <code>master</code>.
</span></div></div>
<p>Before merging <code>about-page</code> back in to the <code>master</code> branch, we’ll make one more change.<span class="intersentencespace"></span> In the editor, use ⌘P or the equivalent to open <code>index.html</code> and add a <em>link</em> to the About page, as shown in <a href="git_fragment.html#code-index_about_link" class="hyperref">Listing <span class="ref">17</span></a>.</p>
<div class="codelisting" id="code-index_about_link" data-tralics-id="uid152" data-number="17"><div class="heading"><span class="number">Listing 17:</span> 

<span class="description">Adding a link to the About page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/index.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>A whale of a greeting<span class="nt">&lt;/title&gt;</span>
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>hello, world<span class="nt">&lt;/h1&gt;</span>
<span class="hll">    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"about.html"</span><span class="nt">&gt;</span>About this project<span class="nt">&lt;/a&gt;</span>
</span>    <span class="nt">&lt;p&gt;</span>Call me Ishmael.<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"images/breaching_whale.jpg"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p><a href="git_fragment.html#code-index_about_link" class="hyperref">Listing <span class="ref">17</span></a> uses the important (if confusingly named) <em>anchor tag</em> <code>a</code>, which is the HTML tag for making links.<span class="intersentencespace"></span> This tag contains both content (“About this project”) and a <em>hypertext reference</em>, or <code>href</code>, which in this case is the <code>about.html</code> file we just created.<span class="intersentencespace"></span> (Because <code>about.html</code> is on the same site, we can link to it directly, but when linking to external sites the href should be a fully qualified URL, such as <a href="http://example.com/" target="_blank">http://example.com/</a>.)</p>
<p>After saving the change and refreshing <code>index.html</code> in our browser, the result should appear as shown in <a href="git_fragment.html#fig-link_to_about_page" class="hyperref">Figure <span class="ref">35</span></a>.<span class="intersentencespace"></span> Following the link should lead us to the About page, as seen in <a href="git_fragment.html#fig-about_page_broken" class="hyperref">Figure <span class="ref">36</span></a>.<span class="intersentencespace"></span> Note that the trademark character ™ doesn’t display properly; we will fix this issue in <a href="git_fragment.html#sec-pushing_branches" class="hyperref">Section <span class="ref">4.3</span></a>.</p>
<div class="center figure" id="fig-link_to_about_page" data-tralics-id="uid153" data-number="35">
<div class="graphics image"><img src="images/figures/link_to_about_page.png" alt="images/figures/link_to_about_page"></div><div class="caption"><span class="header">Figure 35: </span><span class="description">The index page with an added link.
</span></div></div>
<div class="center figure" id="fig-about_page_broken" data-tralics-id="uid154" data-number="36">
<div class="graphics image"><img src="images/figures/about_page_broken.png" alt="images/figures/about_page_broken"></div><div class="caption"><span class="header">Figure 36: </span><span class="description">A slightly broken About page.
</span></div></div>
<p>Having finished with the changes to <code>index.html</code>, we can make a commit as usual with <code>git commit -am</code>:</p>
<div class="code"><div class="highlight"><pre>[website (about-page)]$ git commit -am "Add a link to the About page"
</pre></div></div>
<p>With this commit, the <code>about-pages</code> branch now appears as in <a href="git_fragment.html#fig-about_page_branch_index_changes" class="hyperref">Figure <span class="ref">37</span></a>.</p>
<div class="center figure" id="fig-about_page_branch_index_changes" data-tralics-id="uid155" data-number="37">
<div class="graphics image"><img src="images/figures/about_page_branch_index_changes.png" alt="images/figures/about_page_branch_index_changes"></div><div class="caption"><span class="header">Figure 37: </span><span class="description">The current state of the <code>about-page</code> branch relative to <code>master</code>.
</span></div></div>
<p>We’re done making changes for now, so we’re ready to merge the About page topic branch back into the <code>master</code> branch.<span class="intersentencespace"></span> We can get a handle on which changes we’ll be merging in by using <code>git diff</code>; we saw in <a href="git_fragment.html#sec-viewing_the_diff" class="hyperref">Section <span class="ref">1.4</span></a> that this command can be used by itself to see the difference between unstaged changes and our last commit, but the same command can be used to show diffs between branches.<span class="intersentencespace"></span> This can take the form <code>git diff branch-1 branch-2</code>, but if you leave the branch unspecified Git automatically diffs against the current branch.<span class="intersentencespace"></span> This means we can diff <code>about-page</code> vs. <code>master</code> as follows:</p>
<div class="code"><div class="highlight"><pre>[website (about-page)]$ git diff master
</pre></div></div>
<p>The result in my terminal program appears as shown in <a href="git_fragment.html#fig-git_diff_master" class="hyperref">Figure <span class="ref">38</span></a>.<span class="intersentencespace"></span> On my system, the diff is too long to fit on one screen, but (as we saw with <code>git log</code> in <a href="git_fragment.html#sec-exercises_commit_push_repeat" class="hyperref">Section <span class="ref">3.1.1</span></a>) the output of <code>git diff</code> uses the <code>less</code> program in this case.</p>
<div class="center figure" id="fig-git_diff_master" data-tralics-id="uid156" data-number="38">
<div class="graphics image"><img src="images/figures/git_diff_master.png" alt="images/figures/git_diff_master"></div><div class="caption"><span class="header">Figure 38: </span><span class="description">Diffing two branches.
</span></div></div>
<p>To incorporate the changes on <code>about-page</code> into <code>master</code>, we first check out the <code>master</code> branch, and then merge in the other branch.<span class="intersentencespace"></span> With the configuration settings in <a href="git_fragment.html#sec-prompt_branches_and_tab_completion" class="hyperref">Section <span class="ref">1.1.1</span></a>, you should be able to use tab completion by typing <code>git checkout m⇥</code> to get this:<sup id="cha-0_footnote-ref-22" class="footnote"><a href="#cha-0_footnote-22">22</a></sup></p>
<div class="code"><div class="highlight"><pre>[website (about-page)]$ git checkout master
[website (master)]$
</pre></div></div>
<p>Note that, unlike the <code>checkout</code> command in <a href="git_fragment.html#code-checkout_about_page" class="hyperref">Listing <span class="ref">15</span></a>, here we omit the <code>-b</code> option because the <code>master</code> branch already exists.</p>
<p>At this point, we’re ready to merge in the changes, which we do with <code>git merge</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git merge about-page
</pre></div></div>
<p>At this point, our branch structure appears as in <a href="git_fragment.html#fig-about_page_merged" class="hyperref">Figure <span class="ref">39</span></a>.</p>
<div class="center figure" id="fig-about_page_merged" data-tralics-id="uid158" data-number="39">
<div class="graphics image"><img src="images/figures/about_page_merged.png" alt="images/figures/about_page_merged"></div><div class="caption"><span class="header">Figure 39: </span><span class="description">The branches after merging <code>about-page</code> into <code>master</code>.
</span></div></div>
<p>In the present case, the <code>master</code> branch didn’t change while we were working on the <code>about-page</code> branch, but Git excels even when the original branch has changed in the interim.<span class="intersentencespace"></span> This situation is especially common when collaborating with others (<a href="git_fragment.html#sec-collaborating" class="hyperref">Section <span class="ref">4</span></a>), but can happen even when working alone.<span class="intersentencespace"></span> Suppose, for example, that we discovered a typo on <code>master</code> and wanted to fix it and push up immediately.<span class="intersentencespace"></span> In that case the <code>master</code> branch would change (<a href="git_fragment.html#fig-master_branch_change" class="hyperref">Figure <span class="ref">40</span></a>), but we could still merge in the topic branch as usual.<span class="intersentencespace"></span> There is a possibility that changes on <code>master</code> would <em>conflict</em> with the merged changes, but Git is good at automatically merging content.<span class="intersentencespace"></span> Even when conflict is unavoidable, Git is good at marking conflicts explicitly so that we can resolve them by hand.<span class="intersentencespace"></span> We’ll see a concrete example of this in <a href="git_fragment.html#sec-merge_conflicts" class="hyperref">Section <span class="ref">4.2</span></a>.</p>
<div class="center figure" id="fig-master_branch_change" data-tralics-id="uid159" data-number="40">
<div class="graphics image"><img src="images/figures/master_branch_change.png" alt="images/figures/master_branch_change"></div><div class="caption"><span class="header">Figure 40: </span><span class="description">The tree structure if we made a change to <code>master</code>.
</span></div></div>
<p>Having merged in the changes, we can sync up the local <code>master</code> branch with the version at GitHub (called <code>origin/master</code>) as usual:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git push
</pre></div></div>
<p>Since we probably don’t need the <code>about-page</code> branch any longer, we can optionally delete it, which is left as an exercise (<a href="git_fragment.html#sec-exercises_branching_and_merging" class="hyperref">Section <span class="ref">3.3.2</span></a>).</p>
<div id="sec-rebasing" data-tralics-id="uid160" class="subsubsection" data-number="3.3.1"><h4><a href="#sec-rebasing" class="heading">Rebasing</a></h4>
<p>The most common way to combine branches is <code>git merge</code>, but there’s a second method called <code>git rebase</code> that you’re likely to encounter at some point.<span class="intersentencespace"></span> My advice for now is: <em>ignore <code>git rebase</code></em>.<span class="intersentencespace"></span> The differences between merging and rebasing are subtle, and conventions for using <code>rebase</code> differ, so I recommend using <code>git rebase</code> only when an advanced Git user tells you to; otherwise, use <code>git merge</code> to combine the contents of two branches.</p>
</div>
<div id="sec-exercises_branching_and_merging" data-tralics-id="uid161" class="subsubsection" data-number="3.3.2"><h4><a href="#sec-exercises_branching_and_merging" class="heading">Exercises</a></h4>
<ol>
<li>Use the command <code>git branch -d about-page</code> to delete the topic branch.<span class="intersentencespace"></span> Confirm by running <code>git branch</code> that only the <code>master</code> branch is left.
</li>
<li>In <a href="git_fragment.html#code-checkout_about_page" class="hyperref">Listing <span class="ref">15</span></a>, we used <code>git checkout -b</code> to create a branch and check it out at the same time, but it’s also possible to break this into two steps.<span class="intersentencespace"></span> As a first step, use <code>git branch</code> to make a branch with the name <code>really-long-branch-name</code>.<span class="intersentencespace"></span> (This just involves passing an argument to <code>git branch</code>, as in <code>git branch &lt;branch name&gt;</code>.)<span class="intersentencespace"></span> Confirm by running <code>git branch</code> without an argument that the new branch exists but isn’t currently checked out.
</li>
<li>Use <code>git checkout</code> to check out <code>really-long-branch-name</code>.<span class="intersentencespace"></span> <em>Hint</em>: Use tab completion (<a href="git_fragment.html#sec-prompt_branches_and_tab_completion" class="hyperref">Section <span class="ref">1.1.1</span></a>).
</li>
<li>Use <code>touch</code> to add and commit a file with a name of your choice.
</li>
<li>Check out the <code>master</code> branch and try deleting the really long branch using <code>git branch -d</code> and confirm that it doesn’t work.<span class="intersentencespace"></span> The reason is that, in contrast to the <code>about-page</code> branch, the really long branch hasn’t been merged into <code>master</code>, and by design <code>-d</code> doesn’t work in this case.<span class="intersentencespace"></span> Because we don’t actually want its changes, delete the really long branch by using the related <code>-D</code> option, which deletes the branch in question even if its changes are unmerged.
</li></ol>
</div></div>
<div id="sec-recovering_from_errors" data-tralics-id="uid167" class="subsection" data-number="3.4"><h3><a href="git_fragment.html#sec-recovering_from_errors" class="heading hyperref"><span class="number">3.4 </span>Recovering from errors</a></h3>
<p>One of the most useful features of Git is its ability to let us recover from errors that would otherwise be catastrophic.<span class="intersentencespace"></span> The error-recovery techniques themselves can be dangerous, though, so they should always be implemented with care.</p>
<p>Let’s consider a common scenario where we make an unintentional change to a project and want to get back to the state of the repository as of the most recent commit (a state known as <code>HEAD</code>).<span class="intersentencespace"></span> For example, it’s a good practice to include a newline at the end of a file so that, e.g., running <code>tail</code><sup id="cha-0_footnote-ref-23" class="footnote"><a href="#cha-0_footnote-23">23</a></sup> gives</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ tail about.html
  .
  .
  .
  &lt;/body&gt;
&lt;/html&gt;
[website (master)]$
</pre></div></div>
<p>instead of</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ tail about.html
  .
  .
  .
  &lt;/body&gt;
&lt;/html&gt;[website (master)]$
</pre></div></div>
<p>Of course, we could add such a newline using a text editor, but a common Unix idiom to accomplish the same thing is to use <code>echo</code> with the append operator <code>&gt;&gt;</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ echo &gt;&gt; about.html    # Appends a newline to about.html
</pre></div></div>
<p>Unfortunately, in this context it’s easy to accidentally leave off one of the angle brackets and inadvertently use the <em>redirect</em> operator <code>&gt;</code> instead:<sup id="cha-0_footnote-ref-24" class="footnote"><a href="#cha-0_footnote-24">24</a></sup></p>
<div class="code"><div class="highlight"><pre>[website (master)]$ echo &gt; about.html
</pre></div></div>
<p>Go ahead and try the command above; you will discover that the result is to overwrite <code>about.html</code> with a newline, thereby effectively wiping out its contents, as we can verify with <code>cat</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ cat about.html

[website (master)]$
</pre></div></div>
<p>In a regular Unix directory, there would be no hope of recovering the contents of <code>about.html</code>, but in a Git repository we can undo the changes by forcing the system to check out the most recently committed version.<span class="intersentencespace"></span> We start by confirming that <code>about.html</code> has changed by running <code>git status</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

<span class="hll">  modified:   about.html
</span>
no changes added to commit (use "git add" and/or "git commit -a")
</pre></div></div>
<p>This doesn’t indicate the scope of the damage, though, which we can inspect using <code>git diff</code>:</p>
<div class="code"><div class="highlight"><pre><span class="gh">diff --git a/about.html b/about.html</span>
<span class="gh">index 6278cf6..8b13789 100644</span>
<span class="gd">--- a/about.html</span>
<span class="gi">+++ b/about.html</span>
<span class="gu">@@ -1,13 +1 @@</span>
<span class="gd">-&lt;!DOCTYPE html&gt;</span>
<span class="gd">-&lt;html&gt;</span>
<span class="gd">-  &lt;head&gt;</span>
<span class="gd">-    &lt;title&gt;About Us&lt;/title&gt;</span>
<span class="gd">-  &lt;/head&gt;</span>
<span class="gd">-  &lt;body&gt;</span>
<span class="gd">-    &lt;h1&gt;About&lt;/h1&gt;</span>
<span class="gd">-    &lt;p&gt;</span>
<span class="gd">-      This site is a sample project for the &lt;strong&gt;awesome&lt;/strong&gt; Git</span>
<span class="gd">-      tutorial &lt;em&gt;Learn Enough™ Git to Be Dangerous&lt;/em&gt;.</span>
<span class="gd">-    &lt;/p&gt;</span>
<span class="gd">-  &lt;/body&gt;</span>
<span class="gd">-&lt;/html&gt;</span>
</pre></div></div>
<p>Those minus signs indicate that all of the lines of content are now gone.<span class="intersentencespace"></span> Happily, we can undo these changes by passing the <code>-f</code> (force) option to <code>checkout</code>, which forces Git to check out <code>HEAD</code>:<sup id="cha-0_footnote-ref-25" class="footnote"><a href="#cha-0_footnote-25">25</a></sup></p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git checkout -f
</pre></div></div>
<p>We can then confirm that the About page has been restored:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
</pre></div></div>
<p>Phew!<span class="intersentencespace"></span> That was a close one.<span class="intersentencespace"></span> (It’s worth noting that <code>git checkout -f</code> itself is potentially dangerous, as it wipes out <em>all</em> the changes you’ve made, so use this trick only when you’re 100% sure you want to revert to <code>HEAD</code>.)</p>
<p>Another source of robustness against error is using branches, as described in <a href="git_fragment.html#sec-branching_and_merging" class="hyperref">Section <span class="ref">3.3</span></a>.<span class="intersentencespace"></span> Because changes made on one branch are isolated from other branches, you can always just delete the branch if things go horribly wrong.<span class="intersentencespace"></span> For example, suppose we made the same <code>echo</code> mistake on a <code>test-branch</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git checkout -b test-branch
[website (test-branch)]$ echo &gt; about.html
</pre></div></div>
<p>We can fix this by committing the changes and then deleting the branch:</p>
<div class="code"><div class="highlight"><pre>[website (test-branch)]$ git commit -am "Oops"
[website (test-branch)]$ git checkout master
[website (master)]$ git branch -D test-branch
</pre></div></div>
<p>Note here that we need to use <code>-D</code> instead of <code>-d</code> to delete the branch because <code>test-branch</code> is unmerged (<a href="git_fragment.html#sec-exercises_branching_and_merging" class="hyperref">Section <span class="ref">3.3.2</span></a>).</p>
<p>A final example of recovering from error involves the common case of a bug or other defect that makes its way into a project, origins unknown.<span class="intersentencespace"></span> In such a case, it’s convenient to be able to check out an earlier version of the repository.<sup id="cha-0_footnote-ref-26" class="footnote"><a href="#cha-0_footnote-26">26</a></sup><span class="intersentencespace"></span> The way to do this is to use the SHAs from the Git log (<a href="git_fragment.html#sec-our_first_commit" class="hyperref">Section <span class="ref">1.3</span></a>).<span class="intersentencespace"></span> For example, to restore the website project to the state right after the second commit, we would run <code>git log</code> and navigate to the beginning of the log.<span class="intersentencespace"></span> Because <code>git log</code> uses the <code>less</code> interface, we can do this by typing <code>G</code> to go to the last line of the log.<sup id="cha-0_footnote-ref-27" class="footnote"><a href="#cha-0_footnote-27">27</a></sup><span class="intersentencespace"></span> The result on my system is shown in <a href="git_fragment.html#code-git_log_shas" class="hyperref">Listing <span class="ref">18</span></a>.<span class="intersentencespace"></span> (Because SHAs are by design unique identifiers, your values will differ.)</p>
<div class="codelisting" id="code-git_log_shas" data-tralics-id="uid173" data-number="18"><div class="heading"><span class="number">Listing 18:</span> 

<span class="description">Viewing the SHAs in the Git log.</span>
</div>

<div class="code"><div class="highlight"><pre>[website (master)]$ git log
commit 8c19674468a67720b9ba61a783e81f97062874bf
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Mon Dec 21 21:27:56 2015 -0800

    Add a README

commit 69b955490caf12552e83d476820d29475fa35010
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Mon Dec 21 21:02:20 2015 -0800

    Add some HTML structure

commit 03aff34ec4f9690228e057a4252bcca169a868b4
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Dec 17 20:03:33 2015 -0800

    Add content to index.html

commit 879392a6bd8dd505f21876869de99d73f40299cc
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Thu Dec 17 20:00:34 2015 -0800

    Initialize repository
</pre></div></div></div><p>To check out the commit with the message “Add content to index.html”, simply copy the SHA and check it out:</p>
<div class="code"><div class="highlight"><pre><span class="hll">[website (master)]$ git checkout 03aff34ec4f9690228e057a4252bcca169a868b4
</span>Note: checking out '03aff34ec4f9690228e057a4252bcca169a868b4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 03aff34... Add content to index.html
<span class="hll">[website ((03aff34...))]$
</span></pre></div></div>
<p>Note that the branch name in the last line has changed to reflect the value of the SHA, and Git has issued a warning that we are in a ‘detached HEAD’ state.<span class="intersentencespace"></span> I recommend using this technique to inspect the state of the project and figure out any necessary changes, then check out the <code>master</code> branch to apply them:</p>
<div class="code"><div class="highlight"><pre>[website ((03aff34...))]$ git checkout master
[website (master)]$
</pre></div></div>
<p>At this point, you could switch to your text editor and make any necessary changes (such as fixing a bug discovered on the earlier commit).</p>
<p>If all this seems a little abstract, don’t worry.<span class="intersentencespace"></span> The main takeaways are (1) it’s possible to “go back in history” to view the project at an earlier state and (2) it’s tricky to make changes, so if you find yourself doing anything complicated you should ask a more experienced Git user what to do.<span class="intersentencespace"></span> (In particular, the exact practices in such a case could be team-dependent.)</p>
<div id="sec-exercises_recovering_from_errors" data-tralics-id="uid174" class="subsubsection" data-number="3.4.1"><h4><a href="#sec-exercises_recovering_from_errors" class="heading">Exercises</a></h4>
<ol>
<li>The <code>git checkout -f</code> trick works only with files that are already part of the repository, but sometimes you want to get rid of added files as well.<span class="intersentencespace"></span> Using <code>touch</code>, create a file with a name of your choice, then <code>git add</code> it.<span class="intersentencespace"></span> Verify that running <code>git checkout -f</code> gets rid of it.
</li>
<li>Many Unix programs accept options in both “short form” and “long form”.<span class="intersentencespace"></span> Repeat the previous exercise with <code>git checkout --force</code> to confirm that the effects of <code>-f</code> and <code>--force</code> are identical.<span class="intersentencespace"></span> <em>Extra credit</em>: Double-check this conclusion by finding the “force” option in the output of <code>git help checkout</code>.
</li>
<li>Resetting the working directory by adding all the files and doing a force-checkout is useful enough that it’s probably worth adding the combination as an alias to your system.<span class="intersentencespace"></span> Add <code>gcl</code> (for “Git clear”) to your system by including the contents of <a href="git_fragment.html#code-gcl" class="hyperref">Listing <span class="ref">19</span></a> in your <code>.bash_profile</code> file.<sup id="cha-0_footnote-ref-28" class="footnote"><a href="#cha-0_footnote-28">28</a></sup><span class="intersentencespace"></span> Confirm that it’s working by repeating the first exercise using <code>gcl</code> instead of typing the commands out by hand.<span class="intersentencespace"></span> <em>Hint</em>: Don’t forget to <code>source</code> your <code>.bash_profile</code> file as in <a href="git_fragment.html#sec-prompt_branches_and_tab_completion" class="hyperref">Section <span class="ref">1.1.1</span></a>.
</li></ol>
<div class="codelisting" id="code-gcl" data-tralics-id="uid179" data-number="19"><div class="heading"><span class="number">Listing 19:</span> 

<span class="description">A Bash alias for clearing the working directory of any changes.</span>
</div>

<div class="code"><div class="highlight"><pre><span class="nb">alias </span><span class="nv">gcl</span><span class="o">=</span><span class="s1">'git add -A &amp;&amp; git checkout --force'</span>
</pre></div></div></div></div></div>
<div id="sec-summary_intermediate_workflow" data-tralics-id="uid180" class="subsection" data-number="3.5"><h3><a href="git_fragment.html#sec-summary_intermediate_workflow" class="heading hyperref"><span class="number">3.5 </span>Summary</a></h3>
<p>Important commands from this section are summarized in <a href="git_fragment.html#table-intermediate_workflow" class="hyperref">Table <span class="ref">3</span></a>.</p>
<div id="table-intermediate_workflow" data-tralics-id="uid181" data-number="3" class="table"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left"><strong>Command</strong></td>
<td class="align_left"><strong>Description</strong></td>
<td class="align_left"><strong>Example</strong></td>
</tr><tr><td class="align_left"><code class="tt">.gitignore</code></td>
<td class="align_left">Tell Git which things to ignore</td>
<td class="align_left"><code>$ echo .DS_store &gt;&gt; .gitignore</code></td>
</tr><tr><td class="align_left"><code class="tt">git checkout &lt;br&gt;</code></td>
<td class="align_left">Check out a branch</td>
<td class="align_left"><code>$ git checkout master</code></td>
</tr><tr><td class="align_left"><code class="tt">git checkout -b &lt;br&gt;</code></td>
<td class="align_left">Check out &amp; create a branch</td>
<td class="align_left"><code>$ git checkout -b about-page</code></td>
</tr><tr><td class="align_left"><code class="tt">git branch</code></td>
<td class="align_left">Display local branches</td>
<td class="align_left"><code>$ git branch</code></td>
</tr><tr><td class="align_left"><code class="tt">git merge &lt;br&gt;</code></td>
<td class="align_left">Merge in a branch</td>
<td class="align_left"><code>$ git merge about-page</code></td>
</tr><tr><td class="align_left"><code class="tt">git rebase</code></td>
<td class="align_left">Do something possibly weird &amp; confusing</td>
<td class="align_left">See <a href="#fig-xkcd_git" class="hyperref">Figure <span class="ref">2</span></a> and <a href="#fig-xkcd_git_title_text" class="hyperref">Figure <span class="ref">3</span></a></td>
</tr><tr><td class="align_left"><code class="tt">git branch -d &lt;br&gt;</code></td>
<td class="align_left">Delete branch (if merged)</td>
<td class="align_left"><code>$ git branch -d about-page</code></td>
</tr><tr><td class="align_left"><code class="tt">git branch -D &lt;br&gt;</code></td>
<td class="align_left">Delete branch (even if unmerged) <strong>(dangerous)</strong></td>
<td class="align_left"><code>$ git branch -D other-branch</code></td>
</tr><tr><td class="align_left"><code class="tt">git checkout -f</code></td>
<td class="align_left">Force checkout, discarding changes <strong>(dangerous)</strong></td>
<td class="align_left"><code>$ git add -A &amp;&amp; git checkout -f</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 3: </span><span class="description">Important commands from <a href="git_fragment.html#sec-intermediate_workflow" class="hyperref">Section <span class="ref">3</span></a>.
</span></div></div>
</div></div><div id="sec-collaborating" data-tralics-id="cid4" class="section" data-number="4"><h2><a href="git_fragment.html#sec-collaborating" class="heading hyperref"><span class="number">4 </span>Collaborating</a></h2>
<p>Now that we’ve covered some of the tools needed to use Git effectively on solo projects, it’s time to learn about what is perhaps Git’s greatest strength: making it easier to collaborate with other people.<span class="intersentencespace"></span> This is especially the case when using repository hosts like <a href="http://github.com/" target="_blank">GitHub</a> or <a href="http://bitbucket.com/" target="_blank">Bitbucket</a>, but it is also possible to host Git repositories on private servers (sometimes using software like <a href="https://about.gitlab.com/" target="_blank">GitLab</a> to get many GitHub-like benefits).</p>
<p>Because this tutorial is designed for individual readers, we won’t actually be able to collaborate with others, but this section will explain how you can practice “collaborating” with yourself.<span class="intersentencespace"></span> There are many different collaboration scenarios, and they vary significantly by team and by project, so we’ll focus on the important case of multiple collaborators who all have <em>commit rights</em> to a particular repo.<span class="intersentencespace"></span> This model is appropriate for teams where everyone can make changes without explicit approval from a project maintainer.</p>
<p>Open-source projects typically use a different flow involving <em>forking</em> and <em>pull requests</em>, but the details differ enough that it’s best to defer to the collaboration instructions of each particular project.<span class="intersentencespace"></span> Consider, for example, the instructions for <a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html" target="_blank">contributing to Ruby on Rails</a>.<span class="intersentencespace"></span> With the commands from this tutorial and your technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>), you’ll be in a good position to understand and follow such instructions if you decide to get involved in contributing to open-source software or other projects under version control with Git.</p>
<p>For reference, important commands from this section are summarized in <a href="git_fragment.html#table-collaborating" class="hyperref">Table <span class="ref">4</span></a>.</p>
<div id="sec-clone_push_pull" data-tralics-id="uid182" class="subsection" data-number="4.1"><h3><a href="git_fragment.html#sec-clone_push_pull" class="heading hyperref"><span class="number">4.1 </span>Clone, push, pull</a></h3>
<p>As an example of a common collaboration workflow, we’ll simulate the case of two developers working on the same project, in this case the simple website developed in this tutorial.<span class="intersentencespace"></span> We’ll start with Alice (<a href="git_fragment.html#fig-alice" class="hyperref">Figure <span class="ref">41</span></a>)<sup id="cha-0_footnote-ref-29" class="footnote"><a href="#cha-0_footnote-29">29</a></sup> working in the original <code>website</code> directory, and we’ll create a second directory (<code>website-copy</code>) for her collaborator Bob (<a href="git_fragment.html#fig-bob" class="hyperref">Figure <span class="ref">42</span></a>).<sup id="cha-0_footnote-ref-30" class="footnote"><a href="#cha-0_footnote-30">30</a></sup></p>
<div class="center figure" id="fig-alice" data-tralics-id="uid185" data-number="41">
<div class="graphics image"><img src="images/figures/alice.jpg" alt="images/figures/alice"></div><div class="caption"><span class="header">Figure 41: </span><span class="description">Alice, working on <code>website</code>.
</span></div></div>
<div class="center figure" id="fig-bob" data-tralics-id="uid186" data-number="42">
<div class="graphics image"><img src="images/figures/bob.jpg" alt="images/figures/bob"></div><div class="caption"><span class="header">Figure 42: </span><span class="description">Bob, working on <code>website-copy</code>.
</span></div></div>
<p>As a first step, Alice runs <code>git push</code> just to make sure all her changes are on the remote repository:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (master)]$ git push
</pre></div></div>
<p>In real life, Alice would now need to add Bob as a collaborator on the <code>website</code> repository, which she could do at GitHub by clicking on <strong>Settings &gt; Collaborators</strong> and then put Bob’s GitHub username in the Add collaborator box (<a href="git_fragment.html#fig-github_add_collaborator" class="hyperref">Figure <span class="ref">43</span></a>).<span class="intersentencespace"></span> Because we’re collaborating with ourselves, we can skip this step.</p>
<div class="center figure" id="fig-github_add_collaborator" data-tralics-id="uid187" data-number="43">
<div class="graphics image"><img src="images/figures/github_add_collaborator.png" alt="images/figures/github_add_collaborator"></div><div class="caption"><span class="header">Figure 43: </span><span class="description">The GitHub page to add collaborators.
</span></div></div>
<p>Once Bob gets the notification that he’s been added to the <code>website</code> repository, he can go to GitHub to get the <em>clone URL</em>, as shown in <a href="git_fragment.html#fig-clone_url" class="hyperref">Figure <span class="ref">44</span></a>.<span class="intersentencespace"></span> This URL lets Bob make a full copy of the repository (including its history) using <code>git clone</code>.</p>
<div class="center figure" id="fig-clone_url" data-tralics-id="uid188" data-number="44">
<div class="graphics image"><img src="images/figures/clone_url.png" alt="images/figures/clone_url"></div><div class="caption"><span class="header">Figure 44: </span><span class="description">Finding the clone URL at GitHub.
</span></div></div>
<p>Ordinarily, Bob would probably use his own <code>repos</code> directory, with a project called <code>website</code> as in Alice’s original, but because we’re only simulating the collaboration we’ll use the name <code>website-copy</code> for clarity.<span class="intersentencespace"></span> In addition, when doing something a little artificial like this I like to use a temp directory called <code>~/tmp</code>,<sup id="cha-0_footnote-ref-31" class="footnote"><a href="#cha-0_footnote-31">31</a></sup> so create this directory if it doesn’t already exist on your system:</p>
<div class="code"><div class="highlight"><pre>$ cd
$ mkdir tmp/
</pre></div></div>
<p>Then <code>cd</code> to it and clone the repo to the local directory:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[~]$ cd tmp/
[tmp]$ git clone &lt;clone URL&gt; website-copy
Cloning into 'website-copy'...
[tmp]$ cd website-copy/
</pre></div></div>
<p>Here we’ve included the argument <code>website-copy</code> to <code>git clone</code>, thereby showing how to use a different name than the original repo, but usually you just run <code>git clone &lt;clone URL&gt;</code>, which uses the default repo name (in this case, <code>website</code>).</p>
<p>Now we’re ready to open the copy of the project and start making edits:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p>
<div class="code"><div class="highlight"><pre>[website-copy (master)]$ atom .
</pre></div></div>
<p>For the purposes of this exercise, I recommend placing the editor windows for <code>website</code> and <code>website-copy</code> side by side, as shown in <a href="git_fragment.html#fig-side_by_side" class="hyperref">Figure <span class="ref">45</span></a>.</p>
<div class="center figure" id="fig-side_by_side" data-tralics-id="uid190" data-number="45">
<div class="graphics image"><img src="images/figures/side_by_side.png" alt="images/figures/side_by_side"></div><div class="caption"><span class="header">Figure 45: </span><span class="description">The <code>website</code> and <code>website-copy</code> editors running side by side.
</span></div></div>
<p>To begin the collaboration, we’ll have Bob make a change to the site by wrapping the tutorial title on the About page in a link, like this:</p>
<div class="code"><div class="highlight"><pre><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"http://learnenough.com/git-tutorial"</span><span class="nt">&gt;</span>…<span class="nt">&lt;/a&gt;</span>
</pre></div></div>
<p>Here the ellipsis … represents the full title of the tutorial, <em>Learn Enough™ Git to Be Dangerous</em>.<span class="intersentencespace"></span> The resulting line is too long to display here, but we can wrap it, as shown in <a href="git_fragment.html#fig-toggle_soft_wrap" class="hyperref">Figure <span class="ref">46</span></a>, with the result as shown in <a href="git_fragment.html#fig-wrapped_about_page" class="hyperref">Figure <span class="ref">47</span></a>.</p>
<div class="center figure" id="fig-toggle_soft_wrap" data-tralics-id="uid191" data-number="46">
<div class="graphics image"><img src="images/figures/toggle_soft_wrap.png" alt="images/figures/toggle_soft_wrap"></div><div class="caption"><span class="header">Figure 46: </span><span class="description">Toggling soft wrap in Atom.
</span></div></div>
<div class="center figure" id="fig-wrapped_about_page" data-tralics-id="uid192" data-number="47">
<div class="graphics image"><img src="images/figures/wrapped_about_page.png" alt="images/figures/wrapped_about_page"></div><div class="caption"><span class="header">Figure 47: </span><span class="description">The About page with soft wrap activated.
</span></div></div>
<p>If we look at the diff using <code>git diff</code>, we see the wrapped line (<a href="git_fragment.html#fig-wrapped_diff" class="hyperref">Figure <span class="ref">48</span></a>), which appears in a browser as shown in <a href="git_fragment.html#fig-about_page_link" class="hyperref">Figure <span class="ref">49</span></a>.</p>
<div class="center figure" id="fig-wrapped_diff" data-tralics-id="uid193" data-number="48">
<div class="graphics image"><img src="images/figures/wrapped_diff.png" alt="images/figures/wrapped_diff"></div><div class="caption"><span class="header">Figure 48: </span><span class="description">The diff with a wrapped line.
</span></div></div>
<div class="center figure" id="fig-about_page_link" data-tralics-id="uid194" data-number="49">
<div class="graphics image"><img src="images/figures/about_page_link.png" alt="images/figures/about_page_link"></div><div class="caption"><span class="header">Figure 49: </span><span class="description">Linking the Git tutorial title on the About page.<span class="intersentencespace"></span> 
</span></div></div>
<p>Having added the link, Bob can commit his changes and push up to the remote repository:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p>
<div class="code"><div class="highlight"><pre>[website-copy (master)]$ git commit -am "Add link to tutorial title"
[website-copy (master)]$ git push
</pre></div></div>
<div class="center figure" id="fig-new_tab" data-tralics-id="uid195" data-number="50">
<div class="graphics image"><img src="images/figures/new_tab.png" alt="images/figures/new_tab"></div><div class="caption"><span class="header">Figure 50: </span><span class="description">Using a new terminal tab for the original directory.
</span></div></div>
<p>At this point, Bob might send Alice a notification that there’s a change ready, or Alice might just be diligent about checking for changes.<span class="intersentencespace"></span> In either case, Alice can get the changes from the remote origin by running <code>git pull</code>.<span class="intersentencespace"></span> I suggest opening up a new tab in your terminal window for Alice’s directory, as shown in <a href="git_fragment.html#fig-new_tab" class="hyperref">Figure <span class="ref">50</span></a>, and then run <code>git pull</code>:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git pull
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/mhartl/website
   42db83e..986a487  master     -&gt; origin/master
Updating 42db83e..986a487
Fast-forward
 about.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre></div></div>
<p>With that, Alice’s project should have Bob’s commit, and her copy of the About page should be identical to <a href="git_fragment.html#fig-about_page_link" class="hyperref">Figure <span class="ref">49</span></a>.<span class="intersentencespace"></span> (Checking that Bob’s commit is present in the log is left as an exercise.)</p>
<div id="sec-exercises_clone_push_pull" data-tralics-id="uid196" class="subsubsection" data-number="4.1.1"><h4><a href="#sec-exercises_clone_push_pull" class="heading">Exercises</a></h4>
<ol>
<li>As Alice, run <code>git log</code> to verify that the commit was pulled down correctly.<span class="intersentencespace"></span> Double-check the details using <code>git log -p</code>.
</li>
<li>The whale picture added in <a href="git_fragment.html#code-img_tag" class="hyperref">Listing <span class="ref">13</span></a> (<a href="git_fragment.html#fig-breaching_whale" class="hyperref">Figure <span class="ref">30</span></a>) requires attribution under the <a href="https://creativecommons.org/licenses/by-nd/2.0/" target="_blank">Creative Commons Attribution-NoDerivs 2.0 Generic</a> license.<span class="intersentencespace"></span> As Alice, link the image to the original attribution page, as shown in <a href="git_fragment.html#code-whale_attribution" class="hyperref">Listing <span class="ref">20</span></a>.<span class="intersentencespace"></span> Commit the result and push to GitHub.
</li>
<li>As Bob, pull in the changes from the previous exercise.<span class="intersentencespace"></span> Verify by refreshing the browser and by running <code>git log -p</code> that Bob’s repo has been properly updated.
</li></ol>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p>
<div class="codelisting" id="code-whale_attribution" data-tralics-id="uid200" data-number="20"><div class="heading"><span class="number">Listing 20:</span> 

<span class="description">Linking to the whale image’s attribution page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/index.html</span></span>
</div>

<div class="code"><div class="highlight"><pre>    .
    .
    .
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.flickr.com/photos/28883788@N04/10097824543"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"images/breaching_whale.jpg"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/a&gt;</span>
    .
    .
    .
</pre></div></div></div></div></div>
<div id="sec-merge_conflicts" data-tralics-id="uid201" class="subsection" data-number="4.2"><h3><a href="git_fragment.html#sec-merge_conflicts" class="heading hyperref"><span class="number">4.2 </span>Pulling and merge conflicts</a></h3>
<p>In <a href="git_fragment.html#sec-clone_push_pull" class="hyperref">Section <span class="ref">4.1</span></a>, Alice didn’t make any changes while Bob was making his commit, so there was no chance of conflict, but this is not always the case.<span class="intersentencespace"></span> In particular, when two collaborators edit the same file, it is possible that the changes might be irreconcilable.<span class="intersentencespace"></span> Git is pretty smart about merging in changes, and in general conflicts are surprisingly rare, but it’s important to be able to handle them when they occur.<span class="intersentencespace"></span> In this section, we’ll consider both cases in turn.</p>
<div id="sec-non_conflicting_changes" data-tralics-id="uid202" class="subsubsection" data-number="4.2.1"><h4><a href="#sec-non_conflicting_changes" class="heading">Non-conflicting changes</a></h4>
<p>We’ll start by having Alice and Bob make <em>non</em>-conflicting changes in the same file.<span class="intersentencespace"></span> Suppose Alice decides to change the top-level heading on the About page from “About” to “About Us”, as shown in <a href="git_fragment.html#code-about_us_h1" class="hyperref">Listing <span class="ref">21</span></a>.</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p>
<div class="codelisting" id="code-about_us_h1" data-tralics-id="uid203" data-number="21"><div class="heading"><span class="number">Listing 21:</span> 

<span class="description">Alice’s change to the About page’s <code>h1</code>.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/about.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    .
    .
    .
<span class="hll">    <span class="nt">&lt;h1&gt;</span>About Us<span class="nt">&lt;/h1&gt;</span>
</span>    .
    .
    .
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>After making this change, Alice commits and pushes as usual:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (master)]$ git commit -am "Change page heading"
[website (master)]$ git push
</pre></div></div>
<div class="center figure" id="fig-polar_bear" data-tralics-id="uid204" data-number="51">
<div class="graphics image"><img src="images/figures/polar_bear.jpg" alt="images/figures/polar_bear"></div><div class="caption"><span class="header">Figure 51: </span><span class="description">An image for Bob to add to the About page.
</span></div></div>
<p>Meanwhile, Bob decides to add a new image (<a href="git_fragment.html#fig-polar_bear" class="hyperref">Figure <span class="ref">51</span></a>)<sup id="cha-0_footnote-ref-32" class="footnote"><a href="#cha-0_footnote-32">32</a></sup> to the About page.<span class="intersentencespace"></span> He first downloads it with <code>curl</code> as follows:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master)]$ curl -o images/polar_bear.jpg \
&gt;                             -OL cdn.learnenough.com/polar_bear.jpg
</pre></div></div>
<p>He then adds it to <code>about.html</code> using the <code>img</code> tag, as shown in <a href="git_fragment.html#code-about_page_added_image" class="hyperref">Listing <span class="ref">22</span></a>, with the result shown in <a href="git_fragment.html#fig-about_with_polar_bear" class="hyperref">Figure <span class="ref">52</span></a>.</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p>
<div class="codelisting" id="code-about_page_added_image" data-tralics-id="uid206" data-number="22"><div class="heading"><span class="number">Listing 22:</span> 

<span class="description">Adding an image to the About page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/tmp/website-copy/about.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    .
    .
    .
<span class="hll">    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"images/polar_bear.jpg"</span> <span class="na">alt=</span><span class="s">"Polar bear"</span> <span class="nt">/&gt;</span>
</span>  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>Note that Bob has included an <code>alt</code> attribute in <a href="git_fragment.html#code-about_page_added_image" class="hyperref">Listing <span class="ref">22</span></a>, which is a text alternative to the image.<span class="intersentencespace"></span> The <code>alt</code> attribute is actually required by the HTML5 standard, and including it is a good practice because it’s used by <a href="https://en.wikipedia.org/wiki/Web_crawler" target="_blank">web spiders</a> and by screen readers for the visually impaired.</p>
<div class="center figure" id="fig-about_with_polar_bear" data-tralics-id="uid207" data-number="52">
<div class="graphics image"><img src="images/figures/about_polar_bear_bob.png" alt="images/figures/about_polar_bear_bob"></div><div class="caption"><span class="header">Figure 52: </span><span class="description">The About page with an added image.
</span></div></div>
<p>Having made his change, Bob commits as usual:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master)]$ git add -A
[website-copy (master)]$ git commit -m "Add an image"
</pre></div></div>
<p>When he tries to push, though, something unexpected happens, as shown in <a href="git_fragment.html#code-push_rejected" class="hyperref">Listing <span class="ref">23</span></a>.</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p>
<div class="codelisting" id="code-push_rejected" data-tralics-id="uid208" data-number="23"><div class="heading"><span class="number">Listing 23:</span> 

<span class="description">Bob’s push, rejected.</span>
</div>

<div class="code"><div class="highlight"><pre>[website-copy (master)]$ git push
To https://github.com/mhartl/website.git
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'https://github.com/mhartl/website.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
<span class="hll">hint: (e.g., 'git pull ...') before pushing again.
</span>hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</pre></div></div></div><p>Because of the changes Alice already pushed, Git won’t let Bob’s push go through.<span class="intersentencespace"></span> As indicated by the highlighted line above, the solution to this is for Bob to <code>pull</code>:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master)]$ git pull
</pre></div></div>
<p>Even though Alice made changes to <code>about.html</code>, there is no conflict because Git figures out how to combine the diffs.<span class="intersentencespace"></span> In particular, <code>git pull</code> brings in the changes from the remote repo and merges them in automatically, adding the option to add a commit message by dropping Bob into the default editor, which on most systems is Vim (<a href="git_fragment.html#fig-merge_editor" class="hyperref">Figure <span class="ref">53</span></a>).<span class="intersentencespace"></span> (This is but one of many reasons why <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a> covered Minimum Viable Vim.)<span class="intersentencespace"></span> To get the merge to go through, you can simply quit out of Vim using <code>:q</code>.</p>
<div class="center figure" id="fig-merge_editor" data-tralics-id="uid209" data-number="53">
<div class="graphics image"><img src="images/figures/merge_editor.png" alt="images/figures/merge_editor"></div><div class="caption"><span class="header">Figure 53: </span><span class="description">The default editor for merging from a <code>git pull</code>.
</span></div></div>
<p>We can confirm that this worked by checking the log, which shows both the merge commit and Alice’s commit from the original copy (<a href="git_fragment.html#code-git_log_merge" class="hyperref">Listing <span class="ref">24</span></a>).</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p>
<div class="codelisting" id="code-git_log_merge" data-tralics-id="uid210" data-number="24"><div class="heading"><span class="number">Listing 24:</span> 

<span class="description">The Git log after Bob merges in Alice’s changes.<span class="intersentencespace"></span> (Exact results will differ.)</span>
</div>

<div class="code"><div class="highlight"><pre>[website-copy (master)]$ git log
commit 86dccde63ac15331a068ce79fa9c83d8b784b28b
Merge: 9b7eda1 5ca69e4
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Mon Dec 28 13:14:44 2015 -0800

    Merge branch 'master' of https://github.com/mhartl/website

commit 9b7eda1b0a95740a241684b82d4474aa8f16ae45
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Mon Dec 28 13:13:37 2015 -0800

    Add an image

commit 5ca69e4dca9487b5cd7e1be52222c5389392527d
Author: Michael Hartl &lt;michael@michaelhartl.com&gt;
Date:   Mon Dec 28 13:02:42 2015 -0800

    Change page heading
</pre></div></div></div><p>If Bob now pushes, it should go through as expected:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>$ git push
</pre></div></div>
<p>This puts Bob’s changes on the remote repo, which means Alice can pull them in:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>$ git pull
</pre></div></div>
<p>Alice can confirm that her repo now includes Bob’s changes by inspecting the Git log, which should match the results you got in <a href="git_fragment.html#code-git_log_merge" class="hyperref">Listing <span class="ref">24</span></a>.<span class="intersentencespace"></span> Meanwhile, she can refresh her browser to see Bob’s cool new <a href="http://www.merriam-webster.com/dictionary/ursine" target="_blank">ursine</a> addition (<a href="git_fragment.html#fig-about_polar_bear_alice" class="hyperref">Figure <span class="ref">54</span></a>).</p>
<div class="center figure" id="fig-about_polar_bear_alice" data-tralics-id="uid211" data-number="54">
<div class="graphics image"><img src="images/figures/about_polar_bear_alice.png" alt="images/figures/about_polar_bear_alice"></div><div class="caption"><span class="header">Figure 54: </span><span class="description">Confirming that Alice’s repo includes Bob’s added image.
</span></div></div>
</div>
<div id="sec-conflicting_changes" data-tralics-id="uid212" class="subsubsection" data-number="4.2.2"><h4><a href="#sec-conflicting_changes" class="heading">Conflicting changes</a></h4>
<p>Even though Git’s merge algorithms can often figure out how to combine changes from different collaborators, sometimes there’s no avoiding a conflict.<span class="intersentencespace"></span> For example, suppose both Alice and Bob notice that the required <code>alt</code> attribute is missing from the image included in <a href="git_fragment.html#code-img_tag" class="hyperref">Listing <span class="ref">13</span></a> and decide to correct the issue by adding one.</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p>
<div class="codelisting" id="code-breaching_whale_alt" data-tralics-id="uid213" data-number="25"><div class="heading"><span class="number">Listing 25:</span> 

<span class="description">Alice’s image <code>alt</code>.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/index.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    .
    .
    .
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.flickr.com/photos/28883788@N04/10097824543"</span><span class="nt">&gt;</span>
<span class="hll">      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"images/breaching_whale.jpg"</span> <span class="na">alt=</span><span class="s">"Breaching whale"</span> <span class="nt">/&gt;</span>
</span>    <span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>First, Alice adds the <code>alt</code> attribute “Breaching whale” (<a href="git_fragment.html#code-breaching_whale_alt" class="hyperref">Listing <span class="ref">25</span></a>) and then commits and pushes her change:<sup id="cha-0_footnote-ref-33" class="footnote"><a href="#cha-0_footnote-33">33</a></sup></p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (master)]$ git commit -am "Add necessary image alt"
[website (master)]$ git push
</pre></div></div>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p>
<div class="codelisting" id="code-whale_alt" data-tralics-id="uid215" data-number="26"><div class="heading"><span class="number">Listing 26:</span> 

<span class="description">Bob’s image <code>alt</code>.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/tmp/website-copy/index.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    .
    .
    .
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.flickr.com/photos/28883788@N04/10097824543"</span><span class="nt">&gt;</span>
<span class="hll">      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"images/breaching_whale.jpg"</span> <span class="na">alt=</span><span class="s">"Whale"</span> <span class="nt">/&gt;</span>
</span>    <span class="nt">&lt;/a&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>Meanwhile, Bob adds his own <code>alt</code> attribute, “Whale” (<a href="git_fragment.html#code-whale_alt" class="hyperref">Listing <span class="ref">26</span></a>), and commits his change:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master)]$ git commit -am "Add an alt attribute"
</pre></div></div>
<p>If Bob tries to <code>push</code>, he’ll be met with the same rejection message shown in <a href="git_fragment.html#code-push_rejected" class="hyperref">Listing <span class="ref">23</span></a>, which means he should pull—but that comes at a cost:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre><span class="hll">[website-copy (master)]$ git pull
</span>remote: Counting objects: 3, done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/mhartl/website
   5ca69e4..7ada3b5  master     -&gt; origin/master
Auto-merging index.html
<span class="hll">CONFLICT (content): Merge conflict in index.html
</span><span class="hll">Automatic merge failed; fix conflicts and then commit the result.
</span><span class="hll">[website-copy (master|MERGING)]$
</span></pre></div></div>
<p>As indicated in the second highlighted line, Git has detected a merge conflict from Bob’s pull, and his working copy has been put into a special branch state called <code>master|MERGING</code>.</p>
<p>Bob can see the effect of this conflict by viewing <code>index.html</code> in his text editor, as shown in <a href="git_fragment.html#fig-merge_conflict" class="hyperref">Figure <span class="ref">55</span></a>.<span class="intersentencespace"></span> Supposing Bob prefers Alice’s more descriptive <code>alt</code> text, he can resolve the conflict by deleting all but the line with <code>alt="Breaching whale"</code>, as seen in <a href="git_fragment.html#fig-edited_merge_conflict" class="hyperref">Figure <span class="ref">56</span></a>.</p>
<div class="center figure" id="fig-merge_conflict" data-tralics-id="uid216" data-number="55">
<div class="graphics image"><img src="images/figures/merge_conflict.png" alt="images/figures/merge_conflict"></div><div class="caption"><span class="header">Figure 55: </span><span class="description">A file with a merge conflict.
</span></div></div>
<div class="center figure" id="fig-edited_merge_conflict" data-tralics-id="uid217" data-number="56">
<div class="graphics image"><img src="images/figures/edited_merge_conflict.png" alt="images/figures/edited_merge_conflict"></div><div class="caption"><span class="header">Figure 56: </span><span class="description">The HTML file edited to remove the merge conflict.
</span></div></div>
<p>After saving the file, Bob can commit his change, which causes the prompt to revert back to displaying the <code>master</code> branch, and at that point he’s ready to <code>push</code>:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master|MERGING)]$ git commit -am "Use longer alt attribute"
[website-copy (master)]$ git push
</pre></div></div>
<p>Alice’s and Bob’s repos now have the same content, but it’s still a good idea for Alice to pull in Bob’s merge commit:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (master)]$ git pull
</pre></div></div>
<p>Because of the potential for conflict, it’s a good idea to do a <code>git pull</code> before making any changes on a project with multiple collaborators.<span class="intersentencespace"></span> Even then, on a long enough timeline some conflicts are inevitable, and with the techniques in this section you’re now in a position to handle them.</p>
</div>
<div id="sec-exercises_merge_conflicts" data-tralics-id="uid218" class="subsubsection" data-number="4.2.3"><h4><a href="#sec-exercises_merge_conflicts" class="heading">Exercises</a></h4>
<ol>
<li>Change your default Git editor from Vim to Atom.<span class="intersentencespace"></span> <em>Hint</em>: <a href="http://lmgtfy.com/?q=git+change+default+editor+atom" target="_blank">Google for it</a>.<span class="intersentencespace"></span> (This is an absolutely <em>classic</em> application of technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>): With a well-chosen Google search, you can often go from “I have no idea how to do this” to “It’s done” in under 30 seconds.)
</li>
<li>The polar bear picture added in <a href="git_fragment.html#code-about_page_added_image" class="hyperref">Listing <span class="ref">22</span></a> (<a href="git_fragment.html#fig-polar_bear" class="hyperref">Figure <span class="ref">51</span></a>) requires attribution under the <a href="https://creativecommons.org/licenses/by/2.0/" target="_blank">Creative Commons Attribution 2.0 Generic</a> license.<span class="intersentencespace"></span> As Alice, link the image to the original attribution page, as shown in <a href="git_fragment.html#code-polar_bear_attribution" class="hyperref">Listing <span class="ref">27</span></a>.<span class="intersentencespace"></span> Then run <code>git commit -a</code> <em>without</em> including <code>-m</code> and a command-line message.<span class="intersentencespace"></span> This should drop you into the default Git editor.<span class="intersentencespace"></span> Quit the editor <em>without</em> including a message, which cancels the commit.
</li>
<li>Run <code>git commit -a</code> again, but this time add the commit message “Add polar bear attribution link”.<span class="intersentencespace"></span> Then hit return a couple of times and add a longer message of your choice.<span class="intersentencespace"></span> (One example appears in <a href="git_fragment.html#fig-longer_message" class="hyperref">Figure <span class="ref">57</span></a>.)<span class="intersentencespace"></span> Save the message and exit the editor.
</li>
<li>Run <code>git log</code> to confirm that both the short and longer messages correctly appear.<span class="intersentencespace"></span> After pushing the changes to GitHub, navigate to the page for the commit to confirm that both the short and longer messages correctly appear.
</li>
<li>As Bob, pull in the changes to the About page.<span class="intersentencespace"></span> Verify by refreshing the browser and by running <code>git log -p</code> that Bob’s repo has been properly updated.
</li></ol>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p>
<div class="codelisting" id="code-polar_bear_attribution" data-tralics-id="uid224" data-number="27"><div class="heading"><span class="number">Listing 27:</span> 

<span class="description">Linking to the polar bear image’s attribution page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/about.html</span></span>
</div>

<div class="code"><div class="highlight"><pre>    .
    .
    .
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://www.flickr.com/photos/puliarfanita/22959238329"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"images/polar_bear.jpg"</span> <span class="na">alt=</span><span class="s">"Polar bear"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/a&gt;</span>
    .
    .
    .
</pre></div></div></div><div class="center figure" id="fig-longer_message" data-tralics-id="uid225" data-number="57">
<div class="graphics image"><img src="images/figures/longer_message.png" alt="images/figures/longer_message"></div><div class="caption"><span class="header">Figure 57: </span><span class="description">Adding a longer message in a text editor.
</span></div></div>
</div></div>
<div id="sec-pushing_branches" data-tralics-id="uid226" class="subsection" data-number="4.3"><h3><a href="git_fragment.html#sec-pushing_branches" class="heading hyperref"><span class="number">4.3 </span>Pushing branches</a></h3>
<p>In this section, we’ll apply our newfound collaboration skills to get Alice to request a bugfix from Bob, who will make the correction and then share the result with Alice.<span class="intersentencespace"></span> In the process, we’ll learn how to collaborate on branches other than <code>master</code>, thereby applying the material from <a href="git_fragment.html#sec-branching_and_merging" class="hyperref">Section <span class="ref">3.3</span></a> as well.</p>
<div class="center figure" id="fig-tea_party" data-tralics-id="uid227" data-number="58">
<div class="graphics image"><img src="images/figures/tea_party.jpg" alt="images/figures/tea_party"></div><div class="caption"><span class="header">Figure 58: </span><span class="description">Alice has a <a href="https://www.cs.indiana.edu/metastuff/wonder/ch7.html" target="_blank">tea party</a> to attend and so asks Bob to fix the website.
</span></div></div>
<p>Recall from <a href="git_fragment.html#sec-branching_and_merging" class="hyperref">Section <span class="ref">3.3</span></a> that the trademark character ™ is currently broken on the About page (<a href="git_fragment.html#fig-about_page_broken" class="hyperref">Figure <span class="ref">36</span></a>).<span class="intersentencespace"></span> Alice suspects the fix for this involves adding some markup to the HTML template for the website’s pages, but she’s already agreed to attend a tea party (<a href="git_fragment.html#fig-tea_party" class="hyperref">Figure <span class="ref">58</span></a>),<sup id="cha-0_footnote-ref-34" class="footnote"><a href="#cha-0_footnote-34">34</a></sup> so she only has time to add a couple of <em>HTML comments</em> requesting for Bob to add the relevant fix, as shown in <a href="git_fragment.html#code-about_stub" class="hyperref">Listing <span class="ref">28</span></a> and <a href="git_fragment.html#code-index_stub" class="hyperref">Listing <span class="ref">29</span></a>.<span class="intersentencespace"></span> (We’ll cover HTML comments further in <a href="http://learnenough.com/html-tutorial" target="_blank"><em>Learn Enough™ HTML to Be Dangerous</em></a>.)</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p>
<div class="codelisting" id="code-about_stub" data-tralics-id="uid229" data-number="28"><div class="heading"><span class="number">Listing 28:</span> 

<span class="description">A stub for the fix to the ™ problem.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/about.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>About Us<span class="nt">&lt;/title&gt;</span>
<span class="hll">    <span class="c">&lt;!-- Add something here to fix trademark --&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  .
  .
  .
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><div class="codelisting" id="code-index_stub" data-tralics-id="uid230" data-number="29"><div class="heading"><span class="number">Listing 29:</span> 

<span class="description">A stub to add the ™ fix to the index page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/repos/website/index.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>A whale of a greeting<span class="nt">&lt;/title&gt;</span>
<span class="hll">    <span class="c">&lt;!-- Add something here to fix trademark --&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  .
  .
  .
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>Notice that Alice has wisely asked Bob to fix the index page as well (<a href="git_fragment.html#code-index_stub" class="hyperref">Listing <span class="ref">29</span></a>) even though the current error only occurs on the About page.<span class="intersentencespace"></span> This way, any ™ or similar characters added to <code>index.html</code> will automatically work in the future.<span class="intersentencespace"></span> (As noted in <a href="git_fragment.html#sec-branching_and_merging" class="hyperref">Section <span class="ref">3.3</span></a>, having to make such changes in multiple places is annoying, and it’s also brittle and error-prone.<span class="intersentencespace"></span> The correct solution is to use <em>templates</em>, which we’ll cover starting in <a href="http://www.learnenough.com/css-and-layout-tutorial" target="_blank"><em>Learn Enough™ CSS &amp; Layout to Be Dangerous</em></a>.)</p>
<p>Alice has decided to follow a common convention and use a separate branch for the bugfix, which in this case she calls <code>fix-trademark</code>:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (master)]$ git checkout -b fix-trademark
[website (fix-trademark)]$
</pre></div></div>
<p>This shows something important: it’s possible to make changes to the working directory (in this case, the additions from <a href="git_fragment.html#code-about_stub" class="hyperref">Listing <span class="ref">28</span></a> and <a href="git_fragment.html#code-index_stub" class="hyperref">Listing <span class="ref">29</span></a>) <em>before</em> creating a new branch, as long as those changes haven’t yet been committed.</p>
<p>Having made the new branch for the fix, Alice can make a commit and push up the branch using <code>git push</code>:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (fix-trademark)]$ git commit -am "Add placeholders for the trademark fix"
[website (fix-trademark)]$ git push -u origin fix-trademark
</pre></div></div>
<p>Here Alice has used exactly the same <code>push</code> syntax used in <a href="git_fragment.html#code-github_push_template" class="hyperref">Listing <span class="ref">10</span></a> to push the repo up to GitHub in the first place, with <code>fix-trademark</code> in place of <code>master</code>.</p>
<p>If Alice sends Bob a note before she heads off to her tea party, Bob will know to do a <code>git pull</code> to pull in Alice’s changes:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre><span class="hll">[website-copy (master)]$ git pull
</span>remote: Counting objects: 4, done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 4 (delta 3), reused 4 (delta 3), pack-reused 0
Unpacking objects: 100% (4/4), done.
From https://github.com/mhartl/website
<span class="hll"> * [new branch]      fix-trademark -&gt; origin/fix-trademark
</span>Already up-to-date.
</pre></div></div>
<p>Bob can check his local working directory for the <code>fix-trademark</code> branch that Alice created and pushed, but it isn’t there:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master)]$ git branch
* master
</pre></div></div>
<p>The reason is that the branch is associated with the remote <code>origin</code>, and such branches aren’t displayed by default.<span class="intersentencespace"></span> To see it, Bob can use the <code>-a</code> option (for “all”):<sup id="cha-0_footnote-ref-35" class="footnote"><a href="#cha-0_footnote-35">35</a></sup></p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master)]$ git branch -a
* master
  remotes/origin/HEAD -&gt; origin/master
<span class="hll">  remotes/origin/fix-trademark
</span>  remotes/origin/master
</pre></div></div>
<p>To start work on <code>fix-trademark</code> on his local copy, Bob just needs to check it out.<span class="intersentencespace"></span> By using the same name (i.e., <code>fix-trademark</code>), he arranges for it to be associated with the upstream branch on GitHub, which means that <code>git push</code> will automatically push up his changes:<sup id="cha-0_footnote-ref-36" class="footnote"><a href="#cha-0_footnote-36">36</a></sup></p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (master)]$ git checkout fix-trademark
Branch fix-trademark set up to track remote branch fix-trademark from origin.
Switched to a new branch 'fix-trademark'
[website-copy (fix-trademark)]$
</pre></div></div>
<p>At this point, Bob can <code>diff</code> against <code>master</code> to see what he’s dealing with:</p>
<div class="code"><div class="highlight"><pre>[website-copy (fix-trademark)]$ git diff master
<span class="gh">diff --git a/about.html b/about.html</span>
<span class="gh">index 8a879f5..3d567eb 100644</span>
<span class="gd">--- a/about.html</span>
<span class="gi">+++ b/about.html</span>
<span class="gu">@@ -2,6 +2,7 @@</span>
 &lt;html&gt;
   &lt;head&gt;
     &lt;title&gt;About Us&lt;/title&gt;
<span class="gi">+    &lt;!-- Add something here to fix trademark display --&gt;</span>
   &lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;About Us&lt;/h1&gt;
<span class="gh">diff --git a/index.html b/index.html</span>
<span class="gh">index fcb80f4..c4920c0 100644</span>
<span class="gd">--- a/index.html</span>
<span class="gi">+++ b/index.html</span>
<span class="gu">@@ -2,6 +2,7 @@</span>
 &lt;html&gt;
   &lt;head&gt;
     &lt;title&gt;A whale of a greeting&lt;/title&gt;
<span class="gi">+    &lt;!-- Add something here to fix trademark display --&gt;</span>
   &lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;hello, world&lt;/h1&gt;
</pre></div></div>
<p>Now all Bob has to do is actually implement the fix.<span class="intersentencespace"></span> If you’d like a challenging exercise in technical sophistication, try Googling around to see if you can figure out what the problem might be, and also how you might fix it.<span class="intersentencespace"></span> In case you’d like to do this, I’ll wait here while you look…</p>
<p>All right, the problem is that the page doesn’t have the right <em>character encoding</em> to display non-<a href="https://en.wikipedia.org/wiki/ASCII" target="_blank">ASCII</a> characters like ™, ®, or £.<span class="intersentencespace"></span> The fix involves using a tag called <code>meta</code> to tell browsers to use a character set (or <code>charset</code> for short) called <a href="https://en.wikipedia.org/wiki/UTF-8" target="_blank">UTF-8</a>, which will let our page display anything that’s part of the enormous set of <a href="https://en.wikipedia.org/wiki/Unicode" target="_blank">Unicode</a> characters.<span class="intersentencespace"></span> The result, which you would not necessarily be able to guess, appears in <a href="git_fragment.html#code-about_meta" class="hyperref">Listing <span class="ref">30</span></a> and <a href="git_fragment.html#code-index_meta" class="hyperref">Listing <span class="ref">31</span></a>.</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p>
<div class="codelisting" id="code-about_meta" data-tralics-id="uid233" data-number="30"><div class="heading"><span class="number">Listing 30:</span> 

<span class="description">A fix for the ™ problem.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/tmp/website-copy/about.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>About Us<span class="nt">&lt;/title&gt;</span>
<span class="hll">    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  .
  .
  .
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><div class="codelisting" id="code-index_meta" data-tralics-id="uid234" data-number="31"><div class="heading"><span class="number">Listing 31:</span> 

<span class="description">Adding the ™ fix to the index page.<span class="intersentencespace"></span> <span class="break"></span> <span class="filepath">~/tmp/website-copy/index.html</span></span>
</div>

<div class="code"><div class="highlight"><pre><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>A whale of a greeting<span class="nt">&lt;/title&gt;</span>
<span class="hll">    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">&gt;</span>
</span>  <span class="nt">&lt;/head&gt;</span>
  .
  .
  .
<span class="nt">&lt;/html&gt;</span>
</pre></div></div></div><p>By the way, the <code>meta</code> tag is a special kind of tag called a “void element”, and doesn’t have a closing tag (not even a self-closing like the <code>img</code> tag introduced in <a href="git_fragment.html#sec-commit_push_repeat" class="hyperref">Section <span class="ref">3.1</span></a>).<span class="intersentencespace"></span> This is not the sort of detail you should ever worry about, because solutions like this will almost always involve copying from some reference page or Stack Overflow answer on the Web.</p>
<p>Having made the change, Bob can confirm the fix by reloading the page in his browser, as shown in <a href="git_fragment.html#fig-working_trademark" class="hyperref">Figure <span class="ref">59</span></a>.</p>
<div class="center figure" id="fig-working_trademark" data-tralics-id="uid235" data-number="59">
<div class="graphics image"><img src="images/figures/working_trademark.png" alt="images/figures/working_trademark"></div><div class="caption"><span class="header">Figure 59: </span><span class="description">Confirming a working trademark character.
</span></div></div>
<p>Confident that his solution is correct, Bob can now make a commit and push the fix up to the remote server:</p>
<p><span><span class="graphics"><img src="images/figures/bob_small.png" alt="bob_small"></span></span></p><div class="code"><div class="highlight"><pre>[website-copy (fix-trademark)]$ git commit -am "Fix trademark character display"
[website-copy (fix-trademark)]$ git push
</pre></div></div>
<p>With that, Bob sends a note to Alice that the fix is pushed, and heads out for some well-deserved rest (<a href="git_fragment.html#fig-beach_relaxing" class="hyperref">Figure <span class="ref">60</span></a>).<sup id="cha-0_footnote-ref-37" class="footnote"><a href="#cha-0_footnote-37">37</a></sup></p>
<div class="center figure" id="fig-beach_relaxing" data-tralics-id="uid237" data-number="60">
<div class="graphics image"><img src="images/figures/beach_relaxing.jpg" alt="images/figures/beach_relaxing"></div><div class="caption"><span class="header">Figure 60: </span><span class="description">Bob’s reward for a job well-done.
</span></div></div>
<div class="center figure" id="fig-working_trademark_confirmed" data-tralics-id="uid238" data-number="61">
<div class="graphics image"><img src="images/figures/working_trademark_confirmed.png" alt="images/figures/working_trademark_confirmed"></div><div class="caption"><span class="header">Figure 61: </span><span class="description">Reconfirming the trademark fix before merging.
</span></div></div>
<p>Alice, now back from her tea party, gets Bob’s note and pulls in his fix:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (fix-trademark)]$ git pull
</pre></div></div>
<p>She refreshes her browser to confirm that the ™ character displays properly on her end of things (<a href="git_fragment.html#fig-working_trademark_confirmed" class="hyperref">Figure <span class="ref">61</span></a>), and then merges the changes into <code>master</code>:</p>
<p><span><span class="graphics"><img src="images/figures/alice_small.png" alt="alice_small"></span></span></p><div class="code"><div class="highlight"><pre>[website (fix-trademark)]$ git checkout master
[website (master)]$ git merge fix-trademark
[website (master)]$ git push
</pre></div></div>
<p>With the final <code>git push</code>, Alice arranges for the remote <code>master</code> branch on GitHub to get the fix.<span class="intersentencespace"></span> (Syncing up Bob’s <code>master</code> branch is left as an exercise (<a href="git_fragment.html#sec-exercises_pushing_branches" class="hyperref">Section <span class="ref">4.3.1</span></a>).)</p>
<p>Of course, <code>git push</code> publishes the change only to a remote Git repository.<span class="intersentencespace"></span> Wouldn’t it be nice if there were a way to confirm that the ™ character—and the rest of the website—displays correctly on the live Web?</p>
<div id="sec-exercises_pushing_branches" data-tralics-id="uid239" class="subsubsection" data-number="4.3.1"><h4><a href="#sec-exercises_pushing_branches" class="heading">Exercises</a></h4>
<ol>
<li>Bob’s <code>master</code> branch doesn’t currently have Alice’s merge, so check out <code>master</code> as Bob and do a <code>git pull</code>.<span class="intersentencespace"></span> Confirm using <code>git log</code> that Alice’s merge commit is now present.
</li>
<li>Delete the <code>fix-trademark</code> branch locally.<span class="intersentencespace"></span> Do you need to use the <code>-D</code> option (<a href="git_fragment.html#sec-exercises_branching_and_merging" class="hyperref">Section <span class="ref">3.3.2</span></a>), or is <code>-d</code> sufficient?
</li>
<li>Delete the remote <code>fix-trademark</code> branch on GitHub.<span class="intersentencespace"></span> <em>Hint</em>: If you get stuck, <a href="http://lmgtfy.com/?q=git+delete+remote+branch" target="_blank">Google for it</a>.
</li></ol>
</div></div>
<div id="sec-a_surprise_bonus" data-tralics-id="uid243" class="subsection" data-number="4.4"><h3><a href="git_fragment.html#sec-a_surprise_bonus" class="heading hyperref"><span class="number">4.4 </span>A surprise bonus</a></h3>
<p>As hinted at the end of the last section, it would be nice to be able to confirm that the new character encoding works on a live web page.<span class="intersentencespace"></span> But this requires knowing how to deploy a live site to the Web, and that’s beyond the scope of a humble Git tutorial, right?<span class="intersentencespace"></span> Amazingly, the answer is no.<span class="intersentencespace"></span> The reason is that GitHub offers a free service called <em>GitHub Pages</em>, and <em>any</em> repository at GitHub that contains static HTML is automatically available as a live website.</p>
<p>There is one minor prerequisite to using GitHub Pages, which is that you have to <a href="https://help.github.com/articles/verifying-your-email-address" target="_blank">verify your email address</a> with GitHub.<span class="intersentencespace"></span> Once you’ve done that, though, all you need to do is make and push a branch called <code>gh-pages</code>:</p>
<div class="code"><div class="highlight"><pre>[website (master)]$ git checkout -b gh-pages
[website (gh-pages)]$ git push -u origin gh-pages
</pre></div></div>
<p>That’s it!<span class="intersentencespace"></span> Our website is now available at the URL</p>
<div class="code"><div class="highlight"><pre>http://&lt;username&gt;.github.io/website/
</pre></div></div>
<p>where <code>&lt;username&gt;</code> is your GitHub username.<span class="intersentencespace"></span> Since my username is <code>mhartl</code>, my copy of the this tutorial’s website is at <a href="http://mhartl.github.io/website" target="_blank">mhartl.github.io/website/</a>, as shown in <a href="git_fragment.html#fig-production_website" class="hyperref">Figure <span class="ref">62</span></a>.</p>
<div class="center figure" id="fig-production_website" data-tralics-id="uid244" data-number="62">
<div class="graphics image"><img src="images/figures/production_website.png" alt="images/figures/production_website"></div><div class="caption"><span class="header">Figure 62: </span><span class="description">A production website at GitHub Pages.
</span></div></div>
<p>Note that the URL <code>http://&lt;username&gt;.github.io/website/</code> automatically displays <code>index.html</code>, which is the usual convention on the web: the index page is understood to be the default, so there’s no need to type it in.<span class="intersentencespace"></span> This is not the case with other pages, though, and if you follow the link to the About page you’ll see that the filename appears in the address bar (<a href="git_fragment.html#fig-production_about_page" class="hyperref">Figure <span class="ref">63</span></a>).<span class="intersentencespace"></span> You’ll also see in <a href="git_fragment.html#fig-production_about_page" class="hyperref">Figure <span class="ref">63</span></a> that the trademark character ™ renders correctly on a live website, just as we hoped it would.</p>
<div class="center figure" id="fig-production_about_page" data-tralics-id="uid245" data-number="63">
<div class="graphics image"><img src="images/figures/production_about_page.png" alt="images/figures/production_about_page"></div><div class="caption"><span class="header">Figure 63: </span><span class="description">The About page in production.
</span></div></div>
<p>Because static HTML pages by definition don’t change from one page view to the next, GitHub can <a href="https://en.wikipedia.org/wiki/Web_cache" target="_blank"><em>cache</em></a> them efficiently, which makes GitHub Pages sites both fast and cheap to serve (which is why GitHub can afford to offer them for free).<span class="intersentencespace"></span> This means that such sites can handle a potentially huge amount of traffic, making Pages suitable for production websites.<span class="intersentencespace"></span> The example website in this tutorial is really just a toy, but it’s a great start, and we’ll build on this foundation to make a nearly industrial-grade website in <a href="http://learnenough.com/html-tutorial" target="_blank"><em>Learn Enough™ HTML to Be Dangerous</em></a> and a fully industrial-grade site in <a href="http://www.learnenough.com/css-and-layout-tutorial" target="_blank"><em>Learn Enough™ CSS &amp; Layout to Be Dangerous</em></a>.</p>
<div id="sec-exercises_surprise_bonus" data-tralics-id="uid246" class="subsubsection" data-number="4.4.1"><h4><a href="#sec-exercises_surprise_bonus" class="heading">Exercises</a></h4>
<ol>
<li>On the About page, add a link back to <code>index.html</code>.<span class="intersentencespace"></span> Commit and push your change and verify that the link works on the production site.
</li>
<li>As <a href="https://www.learnenough.com/command-line-tutorial#sec-renaming_copying_deleting" target="_blank">covered</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>, two of the most important Unix commands are <code>mv</code> and <code>rm</code>.<span class="intersentencespace"></span> Git provides analogues of these commands, which have the same effect on local files while also arranging to track the changes.<span class="intersentencespace"></span> Experiment with these commands via the following sequence: Create a file with some <a href="http://lipsum.com/" target="_blank"><em>lorem ipsum</em></a> text, add &amp; commit it, rename it with <code>git mv</code> &amp; commit, then remove it with <code>git rm</code> and commit again.<span class="intersentencespace"></span> Examine the results of <code>git log -p</code> to see how Git handled the operations.
</li>
<li>To practice the process of making a new Git repository, make a second project called <code>second_website</code> in the <code>repos</code> directory.<span class="intersentencespace"></span> Create an <code>index.html</code> file with the content “hello, again!” and follow the steps (starting in <a href="git_fragment.html#sec-initializing_the_repo" class="hyperref">Section <span class="ref">1.2</span></a>) needed to deploy it to the live Web.
</li>
<li>Make a third, secret project called <code>secret_project</code>.<span class="intersentencespace"></span> Touch files called <code>foo</code>, <code>bar</code>, and <code>baz</code> in the main project directory, and then follow the steps to initialize the repository and commit the initial results.<span class="intersentencespace"></span> Then, instead of pushing to a public repository at GitHub, create a free <em>private</em> repository at <a href="http://bitbucket.org/" target="_blank">Bitbucket</a>.<span class="intersentencespace"></span> (You may have to <a href="https://bitbucket.org/account/signup/" target="_blank">sign up for a Bitbucket account</a> and <a href="http://lmgtfy.com/?q=bitbucket+ssh+keys" target="_blank">share the SSH keys</a> you created in <a href="git_fragment.html#sec-github" class="hyperref">Section <span class="ref">2.1</span></a>.)<span class="intersentencespace"></span> The result will be a repository suitable for securely sharing with private collaborators.
</li></ol>
</div></div>
<div id="sec-summary_collaborating" data-tralics-id="uid251" class="subsection" data-number="4.5"><h3><a href="git_fragment.html#sec-summary_collaborating" class="heading hyperref"><span class="number">4.5 </span>Summary</a></h3>
<p>Important commands from this section are summarized in <a href="git_fragment.html#table-collaborating" class="hyperref">Table <span class="ref">4</span></a>.</p>
<div id="table-collaborating" data-tralics-id="uid252" data-number="4" class="table"><table class="tabular">
<tbody><tr class="bottom_border"><td class="align_left"><strong>Command</strong></td>
<td class="align_left"><strong>Description</strong></td>
<td class="align_left"><strong>Example</strong></td>
</tr><tr><td class="align_left"><code class="tt">git clone &lt;URL&gt;</code></td>
<td class="align_left">Copy repo (incl. full history) to local disk</td>
<td class="align_left"><code>$ git clone https://ex.co/repo.git</code></td>
</tr><tr><td class="align_left"><code class="tt">git pull</code></td>
<td class="align_left">Pull in changes from remote repository</td>
<td class="align_left"><code>$ git pull</code></td>
</tr><tr><td class="align_left"><code class="tt">git branch -a</code></td>
<td class="align_left">List all branches</td>
<td class="align_left"><code>$ git branch -a</code></td>
</tr><tr><td class="align_left"><code class="tt">git checkout &lt;br&gt;</code></td>
<td class="align_left">Check out remote branch and configure for push</td>
<td class="align_left"><code>$ git checkout fix-trademark</code></td>
</tr><tr><td class="align_left"><code class="tt">gh-pages</code></td>
<td class="align_left">Branch name for production website</td>
<td class="align_left"><code>$ git push -u origin gh-pages</code></td>
</tr></tbody></table><div class="caption"><span class="header">Table 4: </span><span class="description">Important commands from <a href="git_fragment.html#sec-collaborating" class="hyperref">Section <span class="ref">4</span></a>.
</span></div></div>
</div></div><div id="sec-conclusion" data-tralics-id="cid5" class="section" data-number="5"><h2><a href="git_fragment.html#sec-conclusion" class="heading hyperref"><span class="number">5 </span>Conclusion</a></h2>
<p>Congratulations!<span class="intersentencespace"></span> You now know enough Git to be <em>dangerous</em>.<span class="intersentencespace"></span> There’s a lot more to learn, and if you continue down this technical path you’ll keep getting better at using Git for years to come, but with the material in this tutorial you’ve got a great start.<span class="intersentencespace"></span> For now, you’re probably best off working with what you’ve got, applying your technical sophistication (<a href="#aside-technical_sophistication" class="hyperref">Box <span class="ref">2</span></a>) when necessary.<span class="intersentencespace"></span> Once you’ve gotten a little more experience under your belt, I recommend seeking out additional resources.<span class="intersentencespace"></span> Here are some suggestions for getting started:</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2" target="_blank"><em>Pro Git</em></a> by Scott Chacon and Ben Straub
</li>
<li><a href="https://www.codeschool.com/paths/git" target="_blank">Git path at Code School</a>
</li>
<li><a href="https://www.atlassian.com/git/tutorials/" target="_blank">Git tutorials</a> by Atlassian (makers of <a href="http://bitbucket.org/" target="_blank">Bitbucket</a>)
</li></ul>
<p>At this point, you have completed the <strong>Learn Enough™ Developer Fundamentals</strong> and are in an excellent position to collaborate with millions of software developers around the world.<span class="intersentencespace"></span> You are also well on your way to becoming a developer yourself.<span class="intersentencespace"></span> Regardless of your ultimate goals, you can continue improving your dev skills with the rest of the core Learn Enough™ sequence:</p>
<ol>
<li><strong>Developer Fundamentals</strong>
<ol>
<li><a href="http://www.learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>
</li>
<li><a href="http://www.learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a>
</li>
<li><a href="http://www.learnenough.com/git-tutorial" target="_blank"><em>Learn Enough™ Git to Be Dangerous</em></a> (you are here)
</li></ol>
</li>
<li><strong>Web Basics</strong>
<ol>
<li><a href="http://www.learnenough.com/html-tutorial" target="_blank"><em>Learn Enough™ HTML to Be Dangerous</em></a>
</li>
<li><a href="http://www.learnenough.com/css-and-layout-tutorial" target="_blank"><em>Learn Enough™ CSS &amp; Layout to Be Dangerous</em></a>
</li>
<li><a href="http://www.learnenough.com/javascript-tutorial" target="_blank"><em>Learn Enough™ JavaScript to Be Dangerous</em></a>
</li></ol>
</li>
<li><strong>Intro Ruby Web Development</strong>
<ol>
<li><a href="http://www.learnenough.com/ruby-tutorial" target="_blank"><em>Learn Enough™ Ruby to Be Dangerous</em></a>
</li>
<li><a href="http://www.learnenough.com/sinatra-tutorial" target="_blank"><em>Learn Enough™ Sinatra to Be Dangerous</em></a>
</li>
<li><a href="http://www.learnenough.com/ruby-on-rails-tutorial" target="_blank"><em>Learn Enough™ Ruby on Rails to Be Dangerous</em></a>
</li></ol>
</li>
<li><strong>Professional Ruby Web Development</strong>
<ul>
<li><a href="http://www.railstutorial.org/" target="_blank"><em>The Ruby on Rails Tutorial</em></a>
</li></ul>
</li></ol>
<p>Good luck!</p>
<p><small></small><small><em>Learn Enough™ Git to Be Dangerous</em></small><small>.<span class="intersentencespace"></span> Copyright © 2016 by Michael Hartl.</small></p>
</div><div id="cha-0_footnotes">
  <ol class="footnotes">
    <li id="cha-0_footnote-1">Copyright © Randall Munroe and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by-nc/2.5/" target="_blank">Creative Commons Attribution-NonCommercial 2.5 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-1">↑</a></li>
    <li id="cha-0_footnote-2">Pun intended.<span class="intersentencespace"></span> If you don’t get it, don’t worry—by the end of this tutorial, you will. <a class="arrow" href="#cha-0_footnote-ref-2">↑</a></li>
    <li id="cha-0_footnote-3"><a href="https://en.wikipedia.org/wiki/Git_(slang)" target="_blank"><em>Git</em></a> is a mildly insulting British slang term for a stupid or annoying person, and Linus likes to joke that he named both Linux and Git after himself. <a class="arrow" href="#cha-0_footnote-ref-3">↑</a></li>
    <li id="cha-0_footnote-4">Copyright © Randall Munroe and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by-nc/2.5/" target="_blank">Creative Commons Attribution-NonCommercial 2.5 Generic</a> license.<span class="intersentencespace"></span> The advice in <a href="#fig-xkcd_git" class="hyperref">Figure <span class="ref">2</span></a> to delete your project and download a fresh copy is a joke.<span class="intersentencespace"></span> You shouldn’t follow it.<span class="intersentencespace"></span> Probably. <a class="arrow" href="#cha-0_footnote-ref-4">↑</a></li>
    <li id="cha-0_footnote-5">The <code>which</code> command is discussed <a href="https://www.learnenough.com/command-line-tutorial#sec-downloading_a_file" target="_blank">here</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>. <a class="arrow" href="#cha-0_footnote-ref-5">↑</a></li>
    <li id="cha-0_footnote-6">Image is a common Internet meme <a class="arrow" href="#cha-0_footnote-ref-6">↑</a></li>
    <li id="cha-0_footnote-7"><a href="http://learnenough.com/html-tutorial" target="_blank"><em>Learn Enough™ HTML to Be Dangerous</em></a> and <a href="http://www.learnenough.com/css-and-layout-tutorial" target="_blank"><em>Learn Enough™ CSS &amp; Layout to Be Dangerous</em></a> build on this foundation to make more complicated sites. <a class="arrow" href="#cha-0_footnote-ref-7">↑</a></li>
    <li id="cha-0_footnote-8">As we’ll learn in more detail in <a href="git_fragment.html#sec-branching_and_merging" class="hyperref">Section <span class="ref">3.3</span></a>, branches are effectively copies of the project where we can make changes safely in isolation from any other copies. <a class="arrow" href="#cha-0_footnote-ref-8">↑</a></li>
    <li id="cha-0_footnote-9">Copyright © Randall Munroe and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by-nc/2.5/" target="_blank">Creative Commons Attribution-NonCommercial 2.5 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-9">↑</a></li>
    <li id="cha-0_footnote-10">Copyright © Randall Munroe and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by-nc/2.5/" target="_blank">Creative Commons Attribution-NonCommercial 2.5 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-10">↑</a></li>
    <li id="cha-0_footnote-11">SSH, or <em>Secure Shell</em>, lets you run a Unix shell on a remote computer (such as a Linux webserver).<span class="intersentencespace"></span> The <code>ssh</code> program is often used as a verb, as in “Just ssh into the server and reboot the machine.” <a class="arrow" href="#cha-0_footnote-ref-11">↑</a></li>
    <li id="cha-0_footnote-12">Image retrieved from https://www.flickr.com/photos/hintsa/483303703 on 2016-01-01.<span class="intersentencespace"></span> Copyright © 2006 by Mark Hintsa and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by-nc/2.0/" target="_blank">Creative Commons Attribution-NonCommercial 2.0 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-12">↑</a></li>
    <li id="cha-0_footnote-13"><a href="https://www.cs.indiana.edu/metastuff/wonder/ch1.html" target="_blank"><em>Alice’s Adventures in Wonderland</em></a> original illustrations by John Tenniel.<span class="intersentencespace"></span> Image retrieved from http://www.alice-in-wonderland.net/resources/pictures/alices-adventures-in-wonderland/ on 2016-01-04.<span class="intersentencespace"></span> Copyright © 1865, now in the public domain. <a class="arrow" href="#cha-0_footnote-ref-13">↑</a></li>
    <li id="cha-0_footnote-14">Atom comes with a built-in Markdown previewer, but <a href="http://www.learnenough.com/text-editor-tutorial#sec-customization" target="_blank">recall</a> from <a href="http://learnenough.com/text-editor-tutorial" target="_blank"><em>Learn Enough™ Text Editor to Be Dangerous</em></a> that editors such as Sublime Text often have installable Markdown Preview packages as well. <a class="arrow" href="#cha-0_footnote-ref-14">↑</a></li>
    <li id="cha-0_footnote-15">This involves converting the <code>#</code> in <a href="git_fragment.html#code-readme" class="hyperref">Listing <span class="ref">11</span></a> to a top-level heading (the <code>h1</code> we first saw in <a href="git_fragment.html#sec-adding_a_tag" class="hyperref">Section <span class="ref">1.5</span></a>) and converting each Markdown link of the form <code>[content](address)</code> into an HTML <em>anchor</em> tag <code>a</code>, which we’ll meet in <a href="git_fragment.html#sec-branching_and_merging" class="hyperref">Section <span class="ref">3.3</span></a>. <a class="arrow" href="#cha-0_footnote-ref-15">↑</a></li>
    <li id="cha-0_footnote-16">Image retrieved from https://www.flickr.com/photos/28883788@N04/10097824543 on 2015-12-26.<span class="intersentencespace"></span> Copyright © 2013 by Denis Hawkins and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by-nd/2.0/" target="_blank">Creative Commons Attribution-NoDerivs 2.0 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-16">↑</a></li>
    <li id="cha-0_footnote-17">This happened to me when I ran <code>open images/</code> while writing <a href="git_fragment.html#sec-commit_push_repeat" class="hyperref">Section <span class="ref">3.1</span></a>, which is what reminded me I should cover it here. <a class="arrow" href="#cha-0_footnote-ref-17">↑</a></li>
    <li id="cha-0_footnote-18">Wildcards are <a href="https://www.learnenough.com/command-line-tutorial#sec-listing" target="_blank">discussed</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>, as in the command <code>ls *.txt</code>. <a class="arrow" href="#cha-0_footnote-ref-18">↑</a></li>
    <li id="cha-0_footnote-19">This common practice is further evidence of the ubiquity of Git—at this point, many projects simply assume you’re using it. <a class="arrow" href="#cha-0_footnote-ref-19">↑</a></li>
    <li id="cha-0_footnote-20">I use <code>git checkout</code> for maximum compatibility, but recall that I usually use the shortcut <code>git co</code> as described in <a href="git_fragment.html#sec-installation_and_setup" class="hyperref">Section <span class="ref">1.1</span></a>. <a class="arrow" href="#cha-0_footnote-ref-20">↑</a></li>
    <li id="cha-0_footnote-21">Of course, it would be potentially inefficient to copy all the files over to the new branch, since there’s usually a lot overlap with the old one.<span class="intersentencespace"></span> To avoid any unnecessary duplication, Git tracks diffs rather than actually making full copies of all files. <a class="arrow" href="#cha-0_footnote-ref-21">↑</a></li>
    <li id="cha-0_footnote-22">If you implemented the third line in <a href="git_fragment.html#code-global_config" class="hyperref">Listing <span class="ref">1</span></a>, you could type the even more compact <code>git co m⇥</code>. <a class="arrow" href="#cha-0_footnote-ref-22">↑</a></li>
    <li id="cha-0_footnote-23">The <code>tail</code> command is <a href="https://www.learnenough.com/command-line-tutorial#sec-making_heads_and_tails" target="_blank">covered</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>. <a class="arrow" href="#cha-0_footnote-ref-23">↑</a></li>
    <li id="cha-0_footnote-24">Redirecting and appending are <a href="https://www.learnenough.com/command-line-tutorial#sec-redirecting_and_appending" target="_blank">covered</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>. <a class="arrow" href="#cha-0_footnote-ref-24">↑</a></li>
    <li id="cha-0_footnote-25">The command <code>git reset --hard HEAD</code> is equivalent, but I find the version with <code>checkout</code> to be easier to remember. <a class="arrow" href="#cha-0_footnote-ref-25">↑</a></li>
    <li id="cha-0_footnote-26">The most powerful way to track down such errors is <code>git bisect</code>.<span class="intersentencespace"></span> This advanced technique is covered in the <a href="https://git-scm.com/docs/git-bisect" target="_blank">Git documentation</a>. <a class="arrow" href="#cha-0_footnote-ref-26">↑</a></li>
    <li id="cha-0_footnote-27">This <code>less</code> navigation trick is <a href="https://www.learnenough.com/command-line-tutorial#sec-less_is_more" target="_blank">described</a> in <a href="http://learnenough.com/command-line-tutorial" target="_blank"><em>Learn Enough™ Command Line to Be Dangerous</em></a>. <a class="arrow" href="#cha-0_footnote-ref-27">↑</a></li>
    <li id="cha-0_footnote-28">Note that <a href="git_fragment.html#code-gcl" class="hyperref">Listing <span class="ref">19</span></a> uses <code>--force</code> in place of <code>-f</code>.<span class="intersentencespace"></span> When using the command line, I prefer to use short forms like <code>-f</code>, but in aliases and other source code I prefer to use the long form for clarity. <a class="arrow" href="#cha-0_footnote-ref-28">↑</a></li>
    <li id="cha-0_footnote-29">Image retrieved from https://www.flickr.com/photos/11325321@N08/7194585552 on 2016-01-05.<span class="intersentencespace"></span> Copyright © 2012 by Jenny Park and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by/2.0/" target="_blank">Creative Commons Attribution 2.0 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-29">↑</a></li>
    <li id="cha-0_footnote-30">Image retrieved from https://www.flickr.com/photos/f_rabelais/23685328246 on 2016-01-05.<span class="intersentencespace"></span> Copyright © 2015 by F. Rabelais and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by/2.0/" target="_blank">Creative Commons Attribution 2.0 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-30">↑</a></li>
    <li id="cha-0_footnote-31">The idea behind a temp directory is to have a place to put temporary files that won’t necessarily persist for long.<span class="intersentencespace"></span> Many operating systems have a system-wide temp directory (often called <code>/tmp</code>), but also I like to have one under my home directory for personal use.<span class="intersentencespace"></span> <a class="arrow" href="#cha-0_footnote-ref-31">↑</a></li>
    <li id="cha-0_footnote-32">Image retrieved from https://www.flickr.com/photos/puliarfanita/22959238329 on 2015-12-28.<span class="intersentencespace"></span> Copyright © 2015 by Anita Ritenour and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by/2.0/" target="_blank">Creative Commons Attribution 2.0 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-32">↑</a></li>
    <li id="cha-0_footnote-33"><a href="git_fragment.html#code-breaching_whale_alt" class="hyperref">Listing <span class="ref">25</span></a> and <a href="git_fragment.html#code-whale_alt" class="hyperref">Listing <span class="ref">26</span></a> include the attribution link added in <a href="git_fragment.html#sec-exercises_clone_push_pull" class="hyperref">Section <span class="ref">4.1.1</span></a>. <a class="arrow" href="#cha-0_footnote-ref-33">↑</a></li>
    <li id="cha-0_footnote-34"><a href="https://www.cs.indiana.edu/metastuff/wonder/ch1.html" target="_blank"><em>Alice’s Adventures in Wonderland</em></a> original illustrations by John Tenniel.<span class="intersentencespace"></span> Image retrieved from http://www.alice-in-wonderland.net/resources/pictures/alices-adventures-in-wonderland/ on 2016-01-04.<span class="intersentencespace"></span> Copyright © 1865, now in the public domain. <a class="arrow" href="#cha-0_footnote-ref-34">↑</a></li>
    <li id="cha-0_footnote-35">In fact, <code>git branch --all</code> works, but when using Git at the command line it’s more common to use the short forms of the options. <a class="arrow" href="#cha-0_footnote-ref-35">↑</a></li>
    <li id="cha-0_footnote-36">Note that, because <code>fix-trademark</code> doesn’t yet exist locally, its name can’t be tab-completed in this step, so Bob (and you) will have to type out “fix-trademark” by hand. <a class="arrow" href="#cha-0_footnote-ref-36">↑</a></li>
    <li id="cha-0_footnote-37">Image retrieved from https://www.flickr.com/photos/rtadlock/2716877199 on 2016-01-06.<span class="intersentencespace"></span> Copyright © 2008 by Robert Tadlock and used unaltered under the terms of the <a href="https://creativecommons.org/licenses/by/2.0/" target="_blank">Creative Commons Attribution 2.0 Generic</a> license. <a class="arrow" href="#cha-0_footnote-ref-37">↑</a></li>
  </ol>
</div>